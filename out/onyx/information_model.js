// Compiled by ClojureScript 1.9.542 {}
goog.provide('onyx.information_model');
goog.require('cljs.core');
onyx.information_model.peer_scheduler_event_types = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"peer-reallocated","peer-reallocated",-1441412326),new cljs.core.Keyword(null,"peer-left","peer-left",670695268),new cljs.core.Keyword(null,"job-killed","job-killed",-2079058075),new cljs.core.Keyword(null,"job-completed","job-completed",629265890),new cljs.core.Keyword(null,"recovered","recovered",-2003051022)], null);
onyx.information_model.trigger_event_types = cljs.core.into.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"timer-tick","timer-tick",776188159),new cljs.core.Keyword(null,"new-segment","new-segment",-1974816380)], null),onyx.information_model.peer_scheduler_event_types);
onyx.information_model.model = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"task-states","task-states",728161571),new cljs.core.Keyword(null,"flow-conditions-entry","flow-conditions-entry",-211720219),new cljs.core.Keyword(null,"catalog-entry","catalog-entry",925067367),new cljs.core.Keyword(null,"env-config","env-config",-2058112276),new cljs.core.Keyword(null,"trigger-entry","trigger-entry",-1417013388),new cljs.core.Keyword(null,"state-aggregation","state-aggregation",-1109896907),new cljs.core.Keyword(null,"window-entry","window-entry",-1287033319),new cljs.core.Keyword(null,"lifecycle-calls","lifecycle-calls",247697209),new cljs.core.Keyword(null,"state-event","state-event",683907162),new cljs.core.Keyword(null,"trigger","trigger",103466139),new cljs.core.Keyword(null,"lifecycle-entry","lifecycle-entry",932450398),new cljs.core.Keyword(null,"event-map","event-map",-558385474),new cljs.core.Keyword(null,"peer-config","peer-config",-1170330561),new cljs.core.Keyword(null,"state-refinement","state-refinement",390984767),new cljs.core.Keyword(null,"job","job",850873087)],[new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"summary","summary",380847952),"Task States describes the different phases and states that the task state machine can be in. The peer moves to `:recover` mode on any change in the job allocation, before continuously cycling through the processing modes :start-iteration, :barriers, :process-batch, and :heartbeat). Some states are blocking, in that some condition must be met before advancing to the next state. Note that not all states are applicable to all tasks. For example, non-windowed tasks will strip any states related to state management and windowing.",new cljs.core.Keyword(null,"model","model",331153215),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"recover","recover",849894427),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","poll-recover","lifecycle/poll-recover",-1804437826),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Poll the messenger for the first recovery barrier sent by the coordinator. Once it has received the first barrier, it advances to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","offer-barriers","lifecycle/offer-barriers",-348532241),new cljs.core.Keyword(null,"doc","doc",1913296891),"Offers the next barrier to downstream tasks. Once it succeeds in offering the barrier to all downstream tasks, it advances to the next state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","offer-barrier-status","lifecycle/offer-barrier-status",1859527457),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Offers the peer's current status up to upstream peers. Once it succeeds in offering the status to all upstream tasks, it advances to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","recover-input","lifecycle/recover-input",-1983670105),new cljs.core.Keyword(null,"doc","doc",1913296891),"Reads the checkpoint from durable storage and then supplies the checkpoint to the input plugin recover! method. Advance to the next state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","recover-state","lifecycle/recover-state",1279849464),new cljs.core.Keyword(null,"doc","doc",1913296891),"Reads the checkpoint from durable storage and then supplies the checkpoint to recover the window and trigger states. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"windowed","windowed",-640498299),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","recover-output","lifecycle/recover-output",-1152536654),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"output","output",-1105869043),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Reads the checkpoint from durable storage and then supplies the checkpoint to the output plugin recover! method. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","unblock-subscribers","lifecycle/unblock-subscribers",1388627717),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Unblock the messenger subscriptions, allowing messages to be read by the task. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null)], null),new cljs.core.Keyword(null,"start-iteration","start-iteration",10803671),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","next-iteration","lifecycle/next-iteration",-1414702504),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Resets the event map to start a new interation in the processing phase. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null)], null),new cljs.core.Keyword(null,"barriers","barriers",2029870019),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","input-poll-barriers","lifecycle/input-poll-barriers",-1512216681),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Poll messenger subscriptions for new barriers. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","check-publisher-heartbeats","lifecycle/check-publisher-heartbeats",1978157961),new cljs.core.Keyword(null,"doc","doc",1913296891),"Check whether upstream has timed out directly after subscriber poll. Evict if timeout has been met. Advance to the next state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","seal-barriers?","lifecycle/seal-barriers?",85345672),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Check whether barriers have been received from all upstream sources. If all barriers have been received, advance to checkpoint states, otherwise advance to :lifecycle/before-read-batch.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","seal-barriers?","lifecycle/seal-barriers?",85345672),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"output","output",-1105869043),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Check whether barriers have been received from all upstream sources. If all barriers have been received, advance to checkpoint states, otherwise advance to :lifecycle/before-read-batch.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","checkpoint-input","lifecycle/checkpoint-input",768844618),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Start checkpoint of input state. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","checkpoint-state","lifecycle/checkpoint-state",819144244),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"windowed","windowed",-640498299),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Start checkpoint of window and trigger states. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","checkpoint-output","lifecycle/checkpoint-output",616643624),new cljs.core.Keyword(null,"doc","doc",1913296891),"Start checkpoint of output state. Advance to the next state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"output","output",-1105869043),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","offer-barriers","lifecycle/offer-barriers",-348532241),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Offers the next barrier to downstream tasks. Once it succeeds in offering the barrier to all downstream tasks, it advances to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","offer-barrier-status","lifecycle/offer-barrier-status",1859527457),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Offers the peer's current status up to upstream peers. Once it succeeds in offering the status to all upstream tasks, it advances to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","unblock-subscribers","lifecycle/unblock-subscribers",1388627717),new cljs.core.Keyword(null,"doc","doc",1913296891),"Unblock the messenger subscriptions, allowing messages to be read by the task. Advance to the next state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null)], null),new cljs.core.Keyword(null,"process-batch","process-batch",-1608942378),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","before-batch","lifecycle/before-batch",-1874470000),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Call all `:lifecycle/before-batch` fns supplied via lifecycle calls maps. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","read-batch","lifecycle/read-batch",1187153170),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Poll input source (for `:input` task) or network subscription (for `:function` task and `:output` tasks) for messages, placing these messages in `:onyx.core/batch` in the event map. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","check-publisher-heartbeats","lifecycle/check-publisher-heartbeats",1978157961),new cljs.core.Keyword(null,"doc","doc",1913296891),"Check whether upstream has timed out directly after subscriber poll. Evict if timeout has been met. Advance to the next state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","after-read-batch","lifecycle/after-read-batch",886096329),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false,new cljs.core.Keyword(null,"doc","doc",1913296891),"Call all `:lifecycle/after-read-batch` fns supplied via lifecycle calls maps. Advance to the next state."], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","apply-fn","lifecycle/apply-fn",1540189645),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Call `:onyx/fn` supplied for this task on each segment in `:onyx.core/batch`, placing the results in `:onyx.core/results`. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","after-apply-fn","lifecycle/after-apply-fn",1798612181),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Call all `:lifecycle/after-apply-fn` fns supplied via lifecycle calls maps. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","assign-windows","lifecycle/assign-windows",189506448),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"windowed","windowed",-640498299),null], null), null),new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false,new cljs.core.Keyword(null,"doc","doc",1913296891),"Update windowed aggregation states, and call any trigger functions. Advance to the next state."], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","prepare-batch","lifecycle/prepare-batch",-426699236),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Prepare batch for emission to downstream tasks or output mediums. The prepare-batch method is called on any plugins. prepare-batch is useful when output mediums may reject offers of segments, where write-batch may have to retry writes multiple times. Advance if the plugin prepare-batch method returns true, otherwise idle and retry prepare-batch.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","write-batch","lifecycle/write-batch",145186028),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Write :onyx.core/results to output medium or message :onyx.core/results to downstream peers. write-batch will be called on any plugins. Advance to the next state if write-batch returns true, otherwise idle and retry write-batch.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),true], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","after-batch","lifecycle/after-batch",-1396955646),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Call all `:lifecycle/after-batch` fns supplied via lifecycle calls maps. Advance to the next state.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null)], null),new cljs.core.Keyword(null,"heartbeat","heartbeat",-1141780952),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"lifecycle","lifecycle",341496205),new cljs.core.Keyword("lifecycle","offer-heartbeats","lifecycle/offer-heartbeats",-161785456),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"output","output",-1105869043),null,new cljs.core.Keyword(null,"function","function",-2127255473),null,new cljs.core.Keyword(null,"input","input",556931961),null], null), null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Offer heartbeat messages to peers if it has been `:onyx.peer/heartbeat-ms` milliseconds since the previous heartbeats were sent. Set state to :lifecycle/next-iteration to perform the next task-lifecycle iteration.",new cljs.core.Keyword(null,"blocking?","blocking?",-570952775),false], null)], null)], null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Flow conditions are used for isolating logic about whether or not segments should pass through different tasks in a workflow, and support a rich degree of composition with runtime parameterization.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#flow-conditions",new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("flow","from","flow/from",1812137506),new cljs.core.Keyword("flow","doc","flow/doc",2050658917),new cljs.core.Keyword("flow","action","flow/action",-1393198010),new cljs.core.Keyword("flow","to","flow/to",188953993),new cljs.core.Keyword("flow","predicate","flow/predicate",-1745647926),new cljs.core.Keyword("flow","predicate-errors-to","flow/predicate-errors-to",1617369323),new cljs.core.Keyword("flow","exclude-keys","flow/exclude-keys",-1649393939),new cljs.core.Keyword("flow","short-circuit?","flow/short-circuit?",1461327862),new cljs.core.Keyword("flow","post-transform","flow/post-transform",38759804),new cljs.core.Keyword("flow","thrown-exception?","flow/thrown-exception?",-552689668)],[new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The source task from which segments are being sent.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must name a task in the workflow."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A docstring for this flow condition.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Names a side effect to perform in response to processing this segment. If set to `:retry`, this segment will be immediately, forcibly retried from the root input task from which it emanated. This segment will not be sent to any downstream tasks.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"retry","retry",-614012896)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Any flow condition clauses with `:flow/action` set to `:retry` must also have `:flow/short-circuit?` set to `true`, and `:flow/to` set to `:none`."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The destination task where segments will arrive. If set to `:all`, all downstream tasks will receive this segment. If set to `:none`, no downstream tasks will receive this segment. Otherwise it must name a vector of keywords indicating downstream tasks. The order of keywords is irrelevant.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423)], null),new cljs.core.Keyword(null,"all","all",892129742),new cljs.core.Keyword(null,"none","none",1333468478)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When the value is a vector of keyword, every keyword must name a task in the workflow."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"When denoted as a keyword, this must be a fully qualified, namespaced keyword pointing to a function on the classpath at runtime. This function takes at least 4 arguments - the Event map, the old segment before `:onyx/fn` was applied, the new segment after `:onyx/fn` was applied, and the sequence of new segments generated by the old segment. If the old segment generated exactly one segment, and not a sequence of segments, the value of the last parameter will be a collection with only the new segment in it.\n\n                  When denoted as a vector of keywords, the first value in the vector  may either be the keyword `:and`, `:or`, or `:not`, or be a keyword as described above. In the latter case, any subsequent values must be keywords that resolve to keys in the flow condition entries map. The values of these keys are resolved and passed as additional parameters to the function. In the former case, the result of the function (which may again be wrapped with a vector to nest logical operators or parameters), is applied with the designated logical operator. This yields predicate composition.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A set of tasks to route a segment to when this flow condition's predicate throws an exception. Must be used in conjunction with `:flow/post-transform` to turn exceptions into serializable segments. If set to `:all`, all downstream tasks will receive this segment. If set to `:none`, no downstream tasks will receive this segment. Otherwise it must name a vector of keywords indicating downstream tasks. The order of keywords is irrelevant.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423)], null),new cljs.core.Keyword(null,"all","all",892129742),new cljs.core.Keyword(null,"none","none",1333468478)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["When the value is a vector of keyword, every keyword must name a task in the workflow."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"If any of the keys are present in the segment, they will be `dissoc`ed from the segment before it is sent downstream. This is useful when values in the segment are present purely for the purpose of making a decision about which downstream tasks it should be sent to.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"When multiple flow condition entry predicates evaluated to true, the tasks in `:flow/to` are set unioned. If this behavior is undesirable, and you want exactly the tasks in this flow condition's `:flow/to` key to be used, plus any previously matched flow conditions `:flow/to` values. Setting `:flow/short-circuit?` to `true` will force the matcher to stop executing and immediately return with the values that it matched.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Any entry that has :flow/short-circuit? set to true must come before any entries for an task that have it set to false or nil."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A fully qualified, namespaced keyword that points to a function on the classpath at runtime. This function is invoked when an exception is thrown processing a segment in `:onyx/fn` and this flow condition's predicate evaluates to `true`. The function takes 3 parameters - the Event map, the segment that causes the exception to be thrown, and the exception object. The return value of this function is sent to the downstream tasks instead of trying to serialize the exception. The return value must be a segment or sequence of segments, and must serialize.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:flow/thrown-exception?` must be set to `true`."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"If an exception is thrown from an Onyx transformation function, you can capture it from within your flow conditions by setting this value to `true`. If an exception is thrown, only flow conditions with `:flow/thrown-exception?` set to `true` will be evaluated. The value that is normally the segment which is sent to the predicate will be the exception object that was thrown. Note that exceptions don't serialize. This feature is meant to be used in conjunction with Post-transformations and Actions for sending exception values to downstream tasks.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Exception flow conditions must have `:flow/short-circuit?` set to `true`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"All inputs, outputs, and functions in a workflow must be described via a catalog. A catalog is a vector of maps, strikingly similar to Datomic\u2019s schema. Configuration and docstrings are described in the catalog.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#_catalog",new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("onyx","group-by-key","onyx/group-by-key",1014495201),new cljs.core.Keyword("onyx","fn","onyx/fn",-1172046942),new cljs.core.Keyword("onyx","plugin","onyx/plugin",-1694913021),new cljs.core.Keyword("onyx","uniqueness-key","onyx/uniqueness-key",480579909),new cljs.core.Keyword("onyx","batch-fn?","onyx/batch-fn?",1414947429),new cljs.core.Keyword("onyx","params","onyx/params",716013253),new cljs.core.Keyword("onyx","deduplicate?","onyx/deduplicate?",-1041372443),new cljs.core.Keyword("onyx","medium","onyx/medium",-1885528026),new cljs.core.Keyword("onyx","batch-timeout","onyx/batch-timeout",422744106),new cljs.core.Keyword("onyx","type","onyx/type",1170345418),new cljs.core.Keyword("onyx","name","onyx/name",1848664427),new cljs.core.Keyword("onyx","input-retry-timeout","onyx/input-retry-timeout",-1814857877),new cljs.core.Keyword("onyx","restart-pred-fn","onyx/restart-pred-fn",1562954860),new cljs.core.Keyword("onyx","bulk?","onyx/bulk?",516979180),new cljs.core.Keyword("onyx","max-pending","onyx/max-pending",2089404204),new cljs.core.Keyword("onyx","max-peers","onyx/max-peers",-1096140691),new cljs.core.Keyword("onyx","n-peers","onyx/n-peers",1624351917),new cljs.core.Keyword("onyx","min-peers","onyx/min-peers",1070508110),new cljs.core.Keyword("onyx","required-tags","onyx/required-tags",1663035792),new cljs.core.Keyword("onyx","group-by-fn","onyx/group-by-fn",-260492431),new cljs.core.Keyword("onyx","language","onyx/language",-1594523950),new cljs.core.Keyword("onyx","flux-policy","onyx/flux-policy",-796588140),new cljs.core.Keyword("onyx","doc","onyx/doc",2050978421),new cljs.core.Keyword("onyx","pending-timeout","onyx/pending-timeout",646141687),new cljs.core.Keyword("onyx","batch-size","onyx/batch-size",1209135837)],[new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The key, or vector of keys, to group incoming segments by. Keys that hash to the same value will always be sent to the same virtual peer.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423)], null)], null),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"grouping","grouping",-1219230389),new cljs.core.Keyword(null,"windows","windows",2068861701)], null),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:function` or `:output`"], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Cannot be defined when `:onyx/group-by-fn` is defined.","`:onyx/flux-policy` must also be defined in this catalog entry."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A fully qualified, namespaced keyword that points to a function on the classpath. This function takes at least one argument - an incoming segment, and returns either a segment or a vector of segments. This function may not return `nil`. This function can be parameterized further through a variety of techniques.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"function","function",-2127255473)], null),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:function`"], null),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:input`","`:onyx/type` is set to `:output`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"When `:onyx/language` is set to `:clojure`, this is a fully qualified, namespaced keyword pointing to a function that takes the Event map and returns a Record implementing the Plugin interfaces. When `:onyx/language` is set to `:java`, this is a keyword pointing to a Java class that is constructed with the Event map. This class must implement the interoperability interfaces.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"plugin","plugin",-1688841923)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Namespaced keyword required unless :onyx/language :java is set, in which case a non-namespaced keyword is required."], null),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:input`","`:onyx/type` is set to `:output`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The key of incoming segments that indicates global uniqueness. This is used by the Windowing feature to detect duplicated processing of segments. An example of this would be an `:id` key for segments representing users, assuming `:id` is globally unique in your system. An example of a bad uniqueness-key would be `:first-name` as two or more users may have their first names in common.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"windows","windows",2068861701)], null),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A Window is defined on this task."], null),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Uniqueness keys and deduplication have been deprecated as the Asynchronous Barrier Snapshotting method supports exactly once data processing. If you have duplicates in your input source, you should roll your own filtering mechanism using windowing.",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Boolean value indicating whether the function in this catalog entry denoted by `:onyx/fn` should take a single segment, or the entire batch of segments that were read as a parameter. When `true`, the `:onyx/fn` must return a sequence of the same length as its input match. Each element of the return value represents the children segments that will succeed the corresponding parent segment. Hence, the arguments match positionally. Children values may either be a single segment, or a vector of segments, as normal. This feature is useful for batching requests to services, waiting for whole batches of asynchronous requests to be made, dedepulicating calculations, etc. Libraries such as [claro](https://github.com/xsc/claro), [muse](https://github.com/kachayev/muse), and [urania](https://funcool.github.io/urania/latest/) may be useful for use in these `:onyx/fn`s.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"input","input",556931961),new cljs.core.Keyword(null,"output","output",-1105869043)], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.9.11"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A vector of keys to obtain from the task map, and inject into the initial parameters of the function defined in :onyx/fn. The segment will be injected as the final parameter to the onyx/fn.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"function","function",-2127255473)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),new cljs.core.Keyword(null,"doc","doc",1913296891)],[new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"windows","windows",2068861701)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A Window is defined on this task and there is no possible :onyx/uniqueness-key to on the segment to deduplicate with."], null),true,"0.8.0","Uniqueness keys and deduplication have been deprecated as the Asynchronous Barrier Snapshotting method supports exactly once data processing. If you have duplicates in your input source, you should roll your own filtering mechanism using windowing.",new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["A window is defined on this task."], null),"0.10.0","Does not deduplicate segments using the `:onyx/uniqueness-key`, which is otherwise required when using windowed tasks. Often useful if your segments do not have a unique key that you can use to filter incoming replayed or duplicated segments."]),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Denotes the kind of input or output communication or storage that is being read from or written to (e.g. `:kafka` or `:web-socket`). This is currently does not affect any functionality, and is reserved for the future.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"plugin","plugin",-1688841923)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:input`","`:onyx/type` is set to `:output`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The number of milliseconds a peer will wait to read more segments before processing them all in a batch for this task. Segments will be processed when either `:onyx/batch-timeout` milliseconds passed, or `:onyx/batch-size` segments have been read - whichever comes first. This is a knob that is used to tune throughput and latency, and it goes hand-in-hand with `:onyx/batch-size`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"latency","latency",1825786229),new cljs.core.Keyword(null,"throughput","throughput",-1460864307)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Value must be greater than 0."], null),new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The role that this task performs. `:input` reads data. `:function` applies a transformation. `:output` writes data.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input","input",556931961),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"output","output",-1105869043)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The name of the task that represents this catalog entry. Must correspond to a keyword in the workflow associated with this catalog.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must be unique across all catalog entries.","Value cannot be `:none`.","Value cannot be `:all`."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.Keyword(null,"units","units",-533089095),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),new cljs.core.Keyword(null,"doc","doc",1913296891)],[new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input","input",556931961),new cljs.core.Keyword(null,"plugin","plugin",-1688841923),new cljs.core.Keyword(null,"latency","latency",1825786229),new cljs.core.Keyword(null,"fault-tolerance","fault-tolerance",-332485588)], null),(1000),"0.8.0","`:onyx/input-retry-timeout` has been deprecated as 0.10.0's Asynchronous Barrier Snapshotting fault tolerance technique does not depend on retrying individual segments on a timeout.",new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:input`","Value must be greater than 0."], null),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),"0.10.0","The duration of time, in milliseconds, that the input task goes dormant between checking which segments should expire from its internal pending pool. When segments expire, they are automatically retried."]),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.Keyword(null,"optional?","optional?",1184638129),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),new cljs.core.Keyword(null,"doc","doc",1913296891)],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fault-tolerance","fault-tolerance",-332485588)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must resolve to a function on the classpath at runtime."], null),"0.8.0",":onyx/restart-pred-fn has been removed from Onyx. A more general and powerful feature has been added instead, named Lifecycle Exceptions. See the docs for :lifecycle/handle-exception to switch over.",new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"any","any",1705907423),true,"0.8.9","A fully-qualified namespaced keyword pointing to function which takes an exception as a parameter, returning a boolean indicating whether the peer that threw this exception should restart its task."]),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Boolean value indicating whether the function in this catalog entry denoted by `:onyx/fn` should take a single segment, or the entire batch of segments that were read as a parameter. When set to `true`, this task's `:onyx/fn` return value is ignored. The segments are identically propagated to the downstream tasks. The primary use of `:onyx/bulk?` is for side-effecting functions.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"function","function",-2127255473)], null),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.9.11",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"`:onyx/bulk?` has been deprecated in favor of [`:onyx/batch-fn?`](http://www.onyxplatform.org/docs/cheat-sheet/latest/#catalog-entry/:onyx/batch-fn-QMARK). If you require the previous behavior, ensure your `:onyx/fn` returns the same segments that were passed into it.",new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:function`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.Keyword(null,"units","units",-533089095),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),new cljs.core.Keyword(null,"doc","doc",1913296891)],[new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input","input",556931961),new cljs.core.Keyword(null,"plugin","plugin",-1688841923),new cljs.core.Keyword(null,"latency","latency",1825786229),new cljs.core.Keyword(null,"backpressure","backpressure",-2059136514),new cljs.core.Keyword(null,"fault-tolerance","fault-tolerance",-332485588)], null),(10000),"0.8.0","`:onyx/max-pending` was removed as Asynchronous Barrier Snapshotting performs backpressure via barriers, rather than individual segments.",new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:input`","Value must be greater than 0."], null),new cljs.core.Keyword(null,"segments","segments",1937535949),"0.10.0","The maximum number of segments that a peer executing an input task will allow in its internal pending message pool. If this pool is filled to capacity, it will not accept new segments - exhibiting backpressure to upstream message producers."]),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The maximum number of peers that will ever be assigned to this task concurrently.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"grouping","grouping",-1219230389)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Value must be greater than 0."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A convenience parameter which expands to `:onyx/min-peers` and `:onyx/max-peers` set to the same value. This is useful if you want to specify exactly how many peers should concurrently execute this task - no more, and no less.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"grouping","grouping",-1219230389)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Value must be greater than 0.","`:onyx/min-peers` cannot also be defined for this catalog entry.","`:onyx/max-peers` cannot also be defined for this catalog entry."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The minimum number of peers that will be concurrently assigned to execute this task before it begins. If the number of peers working on this task falls below its initial count due to failure or planned departure, the choice of `:onyx/flux-policy` defines the strategy for what to do.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"grouping","grouping",-1219230389)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Value must be greater than 0."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"When set, only allows peers which have *all* tags listed in this key in their :onyx.peer/tags configuration. This is used for preventing peers without certain user defined capabilities from executing particular tasks. A concrete use case would be only allowing peers with a database license key to execute a specific task.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null),new cljs.core.Keyword(null,"default","default",-1987822328),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.9"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A fully qualified, namespaced keyword that points to a function on the classpath. This function takes a single argument, a segment, as a parameter. The value that the function returns will be hashed. Values that hash to the same value will always be sent to the same virtual peer.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"grouping","grouping",-1219230389),new cljs.core.Keyword(null,"windows","windows",2068861701),new cljs.core.Keyword(null,"function","function",-2127255473)], null),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:function` or `:output`"], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Cannot be defined when `:onyx/group-by-key` is defined.","`:onyx/flux-policy` must also be defined in this catalog entry."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Designates the language that the function denoted by `:onyx/fn` is implemented in.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"interoperability","interoperability",-2103097248)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"clojure","clojure",438975815),new cljs.core.Keyword(null,"java","java",1958249105)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"clojure","clojure",438975815),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The policy that should be used when a task with grouping enabled loses a peer. Losing a peer means that the consistent hashing used to pin the same hashed values to the same peers will be altered. Using the `:kill` flux policy will kill the job. This is useful for jobs that cannot tolerate an altered hashing strategy. Using `:continue` will allow the job to continue running. With `:kill` and `:continue`, new peers will never be added to this job. The final policy is `:recover`, which is like `:continue`, but will allow peers to be added back to this job to meet the `:onyx/min-peers` number of peers working on this task concurrently.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"kill","kill",-12335575),new cljs.core.Keyword(null,"continue","continue",-207346553),new cljs.core.Keyword(null,"recover","recover",849894427)], null),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"grouping","grouping",-1219230389),new cljs.core.Keyword(null,"windows","windows",2068861701)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["If `:kill` is used `:onyx/min-peers` or `:onyx/n-peers` must be defined for this catalog entry.","If `:recover` is used, then `:onyx/max-peers` must be equal to `:onyx/min-peers`. "], null),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:function` or `:output`","`:onyx/group-by-key` or `:onyx/group-by-fn` is set."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A docstring for this catalog entry.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"documentation","documentation",1889593999)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"optionally-allowed-when","optionally-allowed-when",-1263777452),new cljs.core.Keyword(null,"units","units",-533089095),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),new cljs.core.Keyword(null,"doc","doc",1913296891)],[new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input","input",556931961),new cljs.core.Keyword(null,"plugin","plugin",-1688841923),new cljs.core.Keyword(null,"latency","latency",1825786229),new cljs.core.Keyword(null,"fault-tolerance","fault-tolerance",-332485588)], null),(60000),"0.8.0","`:onyx/pending-timeout` has been deprecated as 0.10.0's Asynchronous Barrier Snapshotting fault tolerance technique does not depend on retrying individual segments on a timeout.",new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx/type` is set to `:input`","Value must be greater than 0."], null),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),"0.10.0","The duration of time, in milliseconds, that a segment that enters an input task has to be fully acknowledged and processed. That is, this segment, and any subsequent segments that it creates in downstream tasks, must be fully processed before this timeout occurs. If the segment is not fully processed, it will automatically be retried."]),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The number of segments a peer will wait to read before processing them all in a batch for this task. Segments will be processed when either `:onyx/batch-size` segments have been received at this peer, or `:onyx/batch-timeout` milliseconds have passed - whichever comes first. This is a knob that is used to tune throughput and latency, and it goes hand-in-hand with `:onyx/batch-timeout`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"latency","latency",1825786229),new cljs.core.Keyword(null,"throughput","throughput",-1460864307)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Value must be greater than 0."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"All options available to configure the node environment.",new cljs.core.Keyword(null,"link","link",-1769163468),null,new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("onyx.bookkeeper","disk-usage-threshold","onyx.bookkeeper/disk-usage-threshold",-776536512),new cljs.core.Keyword("zookeeper","server?","zookeeper/server?",186633569),new cljs.core.Keyword("onyx.bookkeeper","server?","onyx.bookkeeper/server?",-1208955422),new cljs.core.Keyword("onyx","tenancy-id","onyx/tenancy-id",-1387279421),new cljs.core.Keyword("onyx.bookkeeper","base-ledger-dir","onyx.bookkeeper/base-ledger-dir",214730950),new cljs.core.Keyword("onyx.bookkeeper","port","onyx.bookkeeper/port",-403389849),new cljs.core.Keyword("zookeeper.server","port","zookeeper.server/port",-387270519),new cljs.core.Keyword("onyx.bookkeeper","zk-ledgers-root-path","onyx.bookkeeper/zk-ledgers-root-path",1198616713),new cljs.core.Keyword("onyx.bookkeeper","disk-usage-warn-threshold","onyx.bookkeeper/disk-usage-warn-threshold",-1724438769),new cljs.core.Keyword("onyx.bookkeeper","local-quorum-ports","onyx.bookkeeper/local-quorum-ports",892735892),new cljs.core.Keyword("onyx.bookkeeper","base-journal-dir","onyx.bookkeeper/base-journal-dir",756994261),new cljs.core.Keyword("onyx","id","onyx/id",-1375545066),new cljs.core.Keyword("zookeeper","address","zookeeper/address",12632054),new cljs.core.Keyword("onyx.bookkeeper","delete-server-data?","onyx.bookkeeper/delete-server-data?",1188449527),new cljs.core.Keyword("onyx.bookkeeper","local-quorum?","onyx.bookkeeper/local-quorum?",-1573667304)],[new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fraction of the total utilized usable disk space to declare the disk full. The value of this parameter represents a percentage.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883),new cljs.core.Keyword(null,"default","default",-1987822328),0.98,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.4"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Bool to denote whether to startup a local, in-memory ZooKeeper. **Important: for TEST purposes only.**",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Bool to denote whether to startup a BookKeeper instance on this node, for use in persisting Onyx state information.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The ID for the cluster that the peers will coordinate via. Provides a way to provide strong, multi-tenant isolation of peers.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"one-of","one-of",144367098),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"uuid","uuid",-2145095719)], null)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Directory to store BookKeeper's ledger in. It is recommended that this is altered to somewhere fast, preferably on a different disk to the BookKeeper journal",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"default","default",-1987822328),"/tmp/bookkeeper_ledger",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Port to startup this node's BookKeeper instance on.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(3196),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:onyx.bookkeeper/server?` is `true` and `:onyx.bookkeeper/local-quorum?` is `false`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Port to use for the local in-memory ZooKeeper",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:zookeeper/server?` is `true`."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Root zookeeper path to store ledger metadata.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"default","default",-1987822328),"/ledgers",new cljs.core.Keyword(null,"added","added",2057651688),"0.9.8"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fraction of the total utilized usable disk space to warn about disk usage. The value of this parameter represents a percentage. It needs to lower or equal than the :onyx.bookkeeper/disk-usage-threshold",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883),new cljs.core.Keyword(null,"default","default",-1987822328),0.95,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.4"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Ports to use for the local BookKeeper quorum.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3196),(3197),(3198)], null),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:onyx.bookkeeper/server?` is `true` and `:onyx.bookkeeper/local-quorum?` is `true`"], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Directory to store BookKeeper's journal in. It is recommended that this is altered to somewhere fast, preferably on a different disk to the BookKeeper ledger.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"default","default",-1987822328),"/tmp/bookkeeper_journal",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The ID for the cluster that the peers will coordinate via. Provides a way to provide strong, multi-tenant isolation of peers.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"one-of","one-of",144367098),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"uuid","uuid",-2145095719)], null)], null),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx.bookkeeper/server?` is `true`."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0",new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.9.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":onyx/id has been renamed :onyx/tenancy-id for clarity. Update all :onyx/id keys accordingly."], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The addresses of the ZooKeeper servers to use for coordination e.g. 192.168.1.1:2181,192.168.1.2:2181",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Bool to denote whether to delete all BookKeeper server instance data on environment shutdown. Set to true when using BookKeeper for unit/integration test runs.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Bool to denote whether to startup a full quorum of BookKeeper instances on this node. **Important: for TEST purposes only.**",new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:onyx.bookkeeper/server?` is `true` and `:onyx.bookkeeper/local-quorum?` is `true`"], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"summary","summary",380847952),"Triggers are a feature that interact with Windows. Windows capture and bucket data over time. Triggers let you release the captured data over a variety of stimuli.",new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("trigger","on","trigger/on",-836079968),new cljs.core.Keyword("trigger","threshold","trigger/threshold",1291289287),new cljs.core.Keyword("trigger","pred","trigger/pred",835767021),new cljs.core.Keyword("trigger","window-id","trigger/window-id",-472875377),new cljs.core.Keyword("trigger","post-evictor","trigger/post-evictor",-1705934992),new cljs.core.Keyword("trigger","period","trigger/period",710363569),new cljs.core.Keyword("trigger","doc","trigger/doc",-1159844365),new cljs.core.Keyword("trigger","sync","trigger/sync",500894838),new cljs.core.Keyword("trigger","watermark-percentage","trigger/watermark-percentage",1245073398),new cljs.core.Keyword("trigger","fire-all-extents?","trigger/fire-all-extents?",-371445799),new cljs.core.Keyword("trigger","refinement","trigger/refinement",-1212299589),new cljs.core.Keyword("trigger","id","trigger/id",-326368132),new cljs.core.Keyword("trigger","state-context","trigger/state-context",-1043486338),new cljs.core.Keyword("trigger","emit","trigger/emit",-76016066)],[new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The event to trigger in reaction to, such as a segment with a special feature, or on a timer. See the User Guide for the full list of prepackaged Triggers. Takes a fully qualified, namespaced keyword resolving to the trigger definition. The following triggers are included with onyx: :onyx.triggers/segment, :onyx.triggers/timer, :onyx.triggers/punctuation, :onyx.triggers/watermark, :onyx.triggers/percentile-watermark",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Used with the trigger :onyx.triggers/segment. A segment trigger will fire every threshold of segments.",new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:trigger/on` is `:segment`"], null),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"elements","elements",657646735)], null),new cljs.core.Keyword(null,"example","example",-1755779144),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(5),new cljs.core.Keyword(null,"elements","elements",657646735)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Used with the trigger :onyx.triggers/punctuation. A fully qualified, namespaced keyword pointing to a function on the classpath at runtime. This function takes 5 arguments: the event map, this window-id, the lower bound of this window, the upper bound of this window, and the segment. This function should return true if the trigger should fire, and false otherwise.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The name of a `:window/id` window to fire the trigger against.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must name a `:window/id` in the window entries."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A way to evict window state after a trigger is fired. Currently only `[:all]`, evicting all window contents, and `[:none]`, leaving all contents, are supported.",new cljs.core.Keyword(null,"example","example",-1755779144),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"all","all",892129742)], null),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"none","none",1333468478)], null),new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [":all and :none are mutually exclusive."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.11.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Used with the trigger :onyx.triggers/timer. A timer trigger sleeps for a duration of `:trigger/period`. When it is done sleeping, the `:trigger/sync` and/or `:trigger/emit` function is invoked with its usual arguments. The trigger goes back to sleep and repeats itself.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:trigger/on` is `:timer`"], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"seconds","seconds",-445266194),new cljs.core.Keyword(null,"second","second",-444702010),new cljs.core.Keyword(null,"minutes","minutes",1319166394),new cljs.core.Keyword(null,"minute","minute",-642875969),new cljs.core.Keyword(null,"hours","hours",58380855),new cljs.core.Keyword(null,"hour","hour",-555989214),new cljs.core.Keyword(null,"days","days",-1394072564),new cljs.core.Keyword(null,"day","day",-274800446)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A docstring for this trigger.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A fully qualified, namespaced keyword pointing to a function on the classpath at runtime. This function takes 5 arguments: the event map, the window map that this trigger is defined on, the trigger map, a state-event map, and the window state as an immutable value. Its return value is ignored.\n                 \n                  This function is invoked when the trigger fires, and is used to do any arbitrary action with the window contents, such as sync them to a database. It is called once for each trigger.\n\n                  You can use lifecycles to supply any stateful connections necessary to sync your data. Supplied values from lifecycles will be available through the first parameter - the event map.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Used with the trigger :onyx.triggers/percentile-watermark. A double between 0.0 and 1.0, both inclusive, representing a percentage greater than the lower bound of a window. If an segment is seen with a value for a windowing key greater than this percentage, the trigger fires.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"When set to `true`, if any particular extent fires in reaction to this trigger, all extents also fire.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A way to refine the window state after a trigger is fired. A fully qualified, namespaced keyword pointing to a symbol on the classpath at runtime. This symbol must be a map with keys as further specified by the refinement information model. As of 0.11.0, refinements are used purely to update state. Please look into `:trigger/pre-evictor` and `:trigger/post-evictor` for other methods of flushing window state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"An id for the trigger that is unique over the window that it is placed on. As of 0.10.0 `:trigger/id`s are required.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"uuid","uuid",-2145095719)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"updated","updated",-1627192056),"0.10.0",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Triggers can be used with different levels of statefulness. `:trigger/state-context` defines the context that the trigger is run in. When ``:trigger-state` is used, a trigger state machine will be used, with the intermediate state results being stored in the state store. When `:window-state` is used, the current state of the window will be supplied to the trigger-fire? function, so that a trigger can be fired based on the contents of the window. Any combination of state contexts may be supplied.",new cljs.core.Keyword(null,"example","example",-1755779144),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"trigger-state","trigger-state",-1285376437)], null),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"trigger-state","trigger-state",-1285376437)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.11.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A fully qualified, namespaced keyword pointing to a function on the classpath at runtime. This function takes 5 arguments: the event map, the window map that this trigger is defined on, the trigger map, a state-event map, and the window state as an immutable value. It must return a segment, or vector of segments, which will flow downstream.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Onyx provides the ability to perform stateful updates for segments calculated over windows. For example, a grouping task may accumulate incoming values for a number of keys over windows of 5 minutes.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#_aggregation",new cljs.core.Keyword(null,"model","model",331153215),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("aggregation","init","aggregation/init",634160316),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (window) to initialize the state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.Keyword("aggregation","init-locals","aggregation/init-locals",115643916),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (window) to initialise local vars for use in other phases of the aggregation. Function should return a map that will be merged into the window map.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.11.0"], null),new cljs.core.Keyword("aggregation","create-state-update","aggregation/create-state-update",-1317662135),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (window, segment) to generate a serializable state machine update.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.Keyword("aggregation","apply-state-update","aggregation/apply-state-update",1828155530),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (window, state, entry) to apply state machine update entry to a state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.Keyword("aggregation","super-aggregation-fn","aggregation/super-aggregation-fn",-682936675),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (window, state-1, state-2) to combine two states in the case of two windows being merged, e.g. session windows.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null)], null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Windows allow you to group and accrue data into possibly overlapping buckets. Windows are intimately related to the Triggers feature.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#windowing-and-aggregation",new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("window","window-key","window/window-key",-436709213),new cljs.core.Keyword("window","slide","window/slide",929701092),new cljs.core.Keyword("window","storage-strategy","window/storage-strategy",-1037386492),new cljs.core.Keyword("window","id","window/id",-62222780),new cljs.core.Keyword("window","session-key","window/session-key",986573062),new cljs.core.Keyword("window","aggregation","window/aggregation",842492712),new cljs.core.Keyword("window","doc","window/doc",-1961448405),new cljs.core.Keyword("window","timeout-gap","window/timeout-gap",1031887595),new cljs.core.Keyword("window","range","window/range",818435118),new cljs.core.Keyword("window","init","window/init",-987606858),new cljs.core.Keyword("window","task","window/task",-720839305),new cljs.core.Keyword("window","type","window/type",-1895193220),new cljs.core.Keyword("window","min-value","window/min-value",-363340643)],[new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The key of the incoming segments to window over. This key can represent any totally ordered domain, for example `:event-time`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:window/type` is set to `:fixed`","`:window/type` is set to `:sliding`","`:window/type` is set to `:session`"], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"To offset of time, or other totally ordered domain, to wait before starting a new window after the previous window.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"unit","unit",375175175)], null),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:window/type` is `:sliding`."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The way that window state is materialized/computed and stored. `:ordered-log`, accumulates aggregation state machine log entries, ordered by event time, in the state store. `:incremental` computes the window incrementally, and only stores the final result. If desired, both combinations may be selected, allowing for the incremental results to be queried via onyx-peer-http-query, while using the `:ordered-log` for trigger invocations. `:extents` stores the window boundaries, but not the materialized values. This is intended to be used in conjunction with `:ordered-log` so that the existing windows are known and can be materialized at any time, and is required when using session windows, if `:incremental` is not used. Please note that each choice will have a performance and space impact, with `:ordered-log` having a greater DB size impact as it must maintain all state machine updates.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ordered-log","ordered-log",121104943),new cljs.core.Keyword(null,"incremental","incremental",-84630877),new cljs.core.Keyword(null,"extents","extents",-1127971346)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"incremental","incremental",-84630877)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.11.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A unique identifier for this window.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"uuid","uuid",-2145095719)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must be unique across all Window entries."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The key of the incoming segments to calculate a session window over.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":window/session-key has been deprecated. Please use `:onyx/group-by-key` or `:onyx/group-by-fn` to window sessions over the session-key.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"If this value is a keyword, it is a fully qualified, namespaced keyword pointing to a symbol on the classpath at runtime. This symbol must be a map with keys as further specified by the information model. Onyx comes with a handful of aggregations built in, such as `:onyx.windowing.aggregation/min`. See the User Guide for the full list. Users can also implement their own aggregations.\n\n                  If this value is a vector, it contain two values: a keyword as described above, and another keyword which represents the key to aggregate over.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A docstring for this window.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The duration of dormant activity that constitutes a session window being closed.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `window/type` is `:session`."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The span of time, or other totally ordered domain, that this window will capture data within.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"unit","unit",375175175)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:window/type` is `:fixed` or `:sliding`."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The initial value to be used for the aggregate, if required. Some aggregates require this, such as the Minimum aggregate. Others, such as the Conj aggregate, do not, as empty vector makes a suitable initial value.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["The `:window/aggregation` has no predefined initial value."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The task that this window will be applied to.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must name a task in the workflow."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The type of Window to use. See the User Guide for what each type means.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fixed","fixed",-562004358),new cljs.core.Keyword(null,"sliding","sliding",1380642697),new cljs.core.Keyword(null,"global","global",93595047),new cljs.core.Keyword(null,"session","session",1008279103)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A globally minimum value that values of `:window/window-key` will never be less than. This is used for calculating materialized aggregates for windows in a space efficient manner.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),(0),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Lifecycle calls are related to lifecycles. They consist of a map of functions that are used when resolving lifecycle entries to their corresponding functions.",new cljs.core.Keyword(null,"link","link",-1769163468),null,new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("lifecycle","doc","lifecycle/doc",1610973345),new cljs.core.Keyword("lifecycle","after-batch","lifecycle/after-batch",-1396955646),new cljs.core.Keyword("lifecycle","after-retry-segment","lifecycle/after-retry-segment",1066246345),new cljs.core.Keyword("lifecycle","after-read-batch","lifecycle/after-read-batch",886096329),new cljs.core.Keyword("lifecycle","before-task-start","lifecycle/before-task-start",85347114),new cljs.core.Keyword("lifecycle","start-task?","lifecycle/start-task?",1478637931),new cljs.core.Keyword("lifecycle","after-ack-segment","lifecycle/after-ack-segment",1535387759),new cljs.core.Keyword("lifecycle","before-batch","lifecycle/before-batch",-1874470000),new cljs.core.Keyword("lifecycle","after-apply-fn","lifecycle/after-apply-fn",1798612181),new cljs.core.Keyword("lifecycle","after-task-stop","lifecycle/after-task-stop",1985614904),new cljs.core.Keyword("lifecycle","handle-exception","lifecycle/handle-exception",1160673407)],[new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A docstring for these lifecycle calls.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a map that is merged back into the original event map. This function is called immediately after a batch of segments has been processed by the peer, but before the batch is acked.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes four arguments - an event map, a message id, the return of an input plugin ack-segment call, and the matching lifecycle map. May return a value of any type which will be discarded. This function is whenever a segment at the input task has been pending for greater than pending-timeout time and will be retried.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":lifecycle/after-retry-segment is not supported in Onyx 0.10 as the messaging model has changed.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a map that is merged back into the original event map. This function is called immediately after a batch of segments has been read by the peer. The segments are available in the event map by the key `:batch`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a map that is merged back into the original event map. This function is called after processes in the task are launched, but before the peer listens for incoming segments from other peers.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a boolean value indicating whether to start the task or not. If false, the process backs off for a preconfigured amount of time and calls this task again. Useful for lock acquisition. This function is called prior to any processes inside the task becoming active.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes four arguments - an event map, a message id, the return of an input plugin ack-segment call, and the matching lifecycle map. May return a value of any type which will be discarded. This function is whenever a segment at the input task has been fully acked.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":lifecycle/after-ack-segment is not supported in Onyx 0.10 as the messaging model has changed.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a map that is merged back into the original event map. This function is called prior to receiving a batch of segments from the reading function.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a map that is merged back into the original event map. This function is called immediately after the `:onyx/fn` is mapped over the batch of segments.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.15"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A function that takes two arguments - an event map, and the matching lifecycle map. Must return a map that is merged back into the original event map. This function is called before the peer relinquishes its task. No more segments will be received.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"If an exception is thrown during any lifecycle execution except `after-task-stop`, one or more lifecycle handlers may be defined. If present, the exception will be caught and passed to this function,  which takes 4 arguments - an event map, the matching lifecycle map, the keyword lifecycle name from which the exception was thrown, and the exception object. This function must return `:kill`, `:restart` or `:defer` indicating whether the job should be killed, the task restarted, or the decision deferred to the next lifecycle exception handler, if another is defined. If all handlers `:defer`, the default behavior is `:kill`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.3"], null)])], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"summary","summary",380847952),"A state event contains context about a state update, trigger call, or refinement update. It consists of a Clojure record, with some keys being nil, depending on the context of the call e.g. a trigger call may include context about the originating cause of the trigger.",new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"onyx.schema.StateEvent","onyx.schema.StateEvent",373788735),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"record","record",-779106859),new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"trigger-update","trigger-update",-2125461343),new cljs.core.Keyword(null,"next-state","next-state",-1428728252),new cljs.core.Keyword(null,"lower-bound","lower-bound",153632489),new cljs.core.Keyword(null,"group-key","group-key",742570475),new cljs.core.Keyword(null,"aggregation-update","aggregation-update",-1473179925),new cljs.core.Keyword(null,"task-event","task-event",1730573741),new cljs.core.Keyword(null,"window","window",724519534),new cljs.core.Keyword(null,"log-type","log-type",2069757168),new cljs.core.Keyword(null,"upper-bound","upper-bound",1562892816),new cljs.core.Keyword(null,"segment","segment",-964921196),new cljs.core.Keyword(null,"grouped?","grouped?",531080948),new cljs.core.Keyword(null,"event-type","event-type",319722813)],[new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The accumulated refinement state updates that will be applied to the window state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The window state that will be set after the refinement update is applied.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The lower most value of any window key for a segment that belongs to this window. Usually coerceable to a java Date. Available in refinements, but not trigger calls. This means that :trigger/on is global over all windows.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The grouping key for the window state. Set when `:onyx/group-by-key` or `:onyx/group-by-fn` is used.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The accumulated window state updates that will be applied to the window state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The full Event map defined in `:event-map` of the information model",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"event-map","event-map",-558385474),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The window entry associated with this state event.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"window-entry","window-entry",-1287033319),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The type of state machine call that will be recorded to storage. For example, if this call was made by a trigger, then upon replay the trigger should be replayed using a trigger call.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"trigger","trigger",103466139),new cljs.core.Keyword(null,"aggregation","aggregation",1597476696)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The uppermost value of any window key for a segment that belongs to this window. Usually coerceable to a java Date. Available in refinements, but not trigger calls. This means that :trigger/on is global over all windows.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The segment that caused the state event to occur. Will only be present when :event-type is :new-segment.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"segment","segment",-964921196),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A boolean defining whether the window state is grouped by key. Only present when event-type is :new-segment.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The event that precipitated the state update or trigger e.g. a new segment arrived",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),onyx.information_model.trigger_event_types,new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Implement different trigger behaviours e.g. timers, segments, etc.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),null,new cljs.core.Keyword(null,"model","model",331153215),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("trigger","init-state","trigger/init-state",1701233828),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (trigger) to initialise the state of the trigger.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.Keyword("trigger","init-locals","trigger/init-locals",-1757731138),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (trigger) to initialise local vars for use in other phases of the trigger. Function should return a map that will be merged into the trigger map.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.Keyword("trigger","next-state","trigger/next-state",1843587884),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (trigger, state-event) updates the trigger state in response to a state-event",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.Keyword("trigger","trigger-fire?","trigger/trigger-fire?",1005631648),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (trigger, trigger-state, state-event) returns a boolean that defines whether the trigger's sync function will be called.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null)], null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Lifecycles are a feature that allow you to control code that executes at particular points during task execution on each peer. Lifecycles are data driven and composable.",new cljs.core.Keyword(null,"link","link",-1769163468),null,new cljs.core.Keyword(null,"model","model",331153215),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("lifecycle","task","lifecycle/task",-1174935319),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The task that this lifecycle applies to.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"restrictions","restrictions",1874752994),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Must be a task defined in the workflow."], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.Keyword("lifecycle","calls","lifecycle/calls",-199124898),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A fully qualified, namespaced keyword pointing to a symbol on the classpath at runtime. This symbol must be a map with keys further specified by the information model. The keys in this map denote the concrete functions to invoke at execution time.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.Keyword("lifecycle","doc","lifecycle/doc",1610973345),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A docstring for this lifecycle.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null)], null)], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"summary","summary",380847952),"Onyx exposes an 'event context' through many of its APIs. This is a description of what you will find in this map and what each of its key/value pairs mean. More keys\nmay be added by the user as the context is associated to throughout the task pipeline.",new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"onyx.schema.Event","onyx.schema.Event",-1896350400),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("onyx.core","outbox-ch","onyx.core/outbox-ch",-328327200),new cljs.core.Keyword("onyx.core","batch","onyx.core/batch",-1789886143),new cljs.core.Keyword("onyx.core","log-prefix","onyx.core/log-prefix",-682870463),new cljs.core.Keyword("onyx.core","workflow","onyx.core/workflow",477881410),new cljs.core.Keyword("onyx.core","output-plugin","onyx.core/output-plugin",1141252675),new cljs.core.Keyword("onyx.core","task-kill-flag","onyx.core/task-kill-flag",1049846053),new cljs.core.Keyword("onyx.core","id","onyx.core/id",-528839707),new cljs.core.Keyword("onyx.core","task-map","onyx.core/task-map",1668186921),new cljs.core.Keyword("onyx.core","flow-conditions","onyx.core/flow-conditions",328485226),new cljs.core.Keyword("onyx.core","storage","onyx.core/storage",714051018),new cljs.core.Keyword("onyx.core","task-information","onyx.core/task-information",1009362826),new cljs.core.Keyword("onyx.core","replica-atom","onyx.core/replica-atom",-1632885941),new cljs.core.Keyword("onyx.core","catalog","onyx.core/catalog",-654793619),new cljs.core.Keyword("onyx.core","input-plugin","onyx.core/input-plugin",-1816018803),new cljs.core.Keyword("onyx.core","log","onyx.core/log",-459178643),new cljs.core.Keyword("onyx.core","metadata","onyx.core/metadata",672338062),new cljs.core.Keyword("onyx.core","group-ch","onyx.core/group-ch",1471362927),new cljs.core.Keyword("onyx.core","lifecycle-id","onyx.core/lifecycle-id",1823796111),new cljs.core.Keyword("onyx.core","monitoring","onyx.core/monitoring",-1412411087),new cljs.core.Keyword("onyx.core","results","onyx.core/results",-115224142),new cljs.core.Keyword("onyx.core","fn","onyx.core/fn",2108604083),new cljs.core.Keyword("onyx.core","resume-point","onyx.core/resume-point",1617502612),new cljs.core.Keyword("onyx.core","tenancy-id","onyx.core/tenancy-id",1640468148),new cljs.core.Keyword("onyx.core","peer-opts","onyx.core/peer-opts",213451637),new cljs.core.Keyword("onyx.core","job-id","onyx.core/job-id",-367579179),new cljs.core.Keyword("onyx.core","triggered","onyx.core/triggered",-1326462890),new cljs.core.Keyword("onyx.core","windows","onyx.core/windows",-1130597258),new cljs.core.Keyword("onyx.core","task","onyx.core/task",1756945878),new cljs.core.Keyword("onyx.core","slot-id","onyx.core/slot-id",-1849532969),new cljs.core.Keyword("onyx.core","task-id","onyx.core/task-id",2120719255),new cljs.core.Keyword("onyx.core","scheduler-event","onyx.core/scheduler-event",1085307799),new cljs.core.Keyword("onyx.core","lifecycles","onyx.core/lifecycles",150880888),new cljs.core.Keyword("onyx.core","params","onyx.core/params",-299516516),new cljs.core.Keyword("onyx.core","serialized-task","onyx.core/serialized-task",1699328574),new cljs.core.Keyword("onyx.core","kill-flag","onyx.core/kill-flag",-1306429793),new cljs.core.Keyword("onyx.core","triggers","onyx.core/triggers",1971263327)],[new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"channel","channel",734187692),new cljs.core.Keyword(null,"doc","doc",1913296891),"The core.async channel to deliver outgoing log entries on"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"segment","segment",-964921196)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"The sequence of segments read by this peer"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"doc","doc",1913296891),"Logging context including more information about the task, peer and job ids."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"workflow","workflow",-640694607),new cljs.core.Keyword(null,"doc","doc",1913296891),"The workflow for this job"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"doc","doc",1913296891),"Instantiation of the input plugin for this task."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"channel","channel",734187692),new cljs.core.Keyword(null,"doc","doc",1913296891),"Signalling channel used to kill the task."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"uuid","uuid",-2145095719),new cljs.core.Keyword(null,"doc","doc",1913296891),"The unique ID of this peer's lifecycle"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"catalog-entry","catalog-entry",925067367),new cljs.core.Keyword(null,"doc","doc",1913296891),"The catalog entry for this task"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"flow-conditions-entry","flow-conditions-entry",-211720219)], null),new cljs.core.Keyword(null,"doc","doc",1913296891),"The flow conditions for this job"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"record","record",-779106859),new cljs.core.Keyword(null,"doc","doc",1913296891),"The durable storage record component, used for checkpointing."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"record","record",-779106859),new cljs.core.Keyword(null,"doc","doc",1913296891),"Task information for this task. Mostly consists of data already in the event map."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"replica-atom","replica-atom",-490714756),new cljs.core.Keyword(null,"doc","doc",1913296891),"The replica that this peer has currently accrued."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"catalog-entry","catalog-entry",925067367)], null),new cljs.core.Keyword(null,"doc","doc",1913296891),"The full catalog for this job"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"doc","doc",1913296891),"Instantiation of the input plugin for this task."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"record","record",-779106859),new cljs.core.Keyword(null,"doc","doc",1913296891),"The log record component, used to write to ZooKeeper."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"job-metadata","job-metadata",-1874941597),new cljs.core.Keyword(null,"doc","doc",1913296891),"The job's metadata, supplied via the :metadata key when submitting the job"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"channel","channel",734187692),new cljs.core.Keyword(null,"doc","doc",1913296891),"The core.async channel to deliver restart notifications to the peer"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"uuid","uuid",-2145095719),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"The unique ID for this *execution* of the lifecycle"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"record","record",-779106859),new cljs.core.Keyword(null,"doc","doc",1913296891),"Onyx monitoring component implementing the [IEmitEvent](https://github.com/onyx-platform/onyx/blob/master/src/onyx/extensions.clj) protocol"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"results","results",-1134170113),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"A map containing `:tree`: the mapping of segments to the newly created segments, `:segments`: the newly created segments, `:retries`: the segments that will be retried from the input source."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"doc","doc",1913296891),"The :onyx/fn for this task."], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"Resume point provided as part of onyx job `:resume-point` key."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"doc","doc",1913296891),"The ID for the cluster that the peers will coordinate through. Provides a means for strong, multi-tenant isolation of peers."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"peer-config","peer-config",-1170330561),new cljs.core.Keyword(null,"doc","doc",1913296891),"The options that this peer was started with"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"uuid","uuid",-2145095719),new cljs.core.Keyword(null,"doc","doc",1913296891),"The Job ID of the task that this peer is executing"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"segment","segment",-964921196)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"A sequential containing segments emitted by `:trigger/emit`."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"window-entry","window-entry",-1287033319)], null),new cljs.core.Keyword(null,"doc","doc",1913296891),"The window entries for this job"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"doc","doc",1913296891),"The task name that this peer is executing"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"doc","doc",1913296891),"The Task Slot ID allocated to this peer."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"doc","doc",1913296891),"The Task ID that this peer is executing"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),onyx.information_model.peer_scheduler_event_types,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"The cause of a peer allocated to a task being stopped. This will be added to the event map before the `:lifecycle/after-task-stop` lifecycle function is called."], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"lifecycle-entry","lifecycle-entry",932450398)], null),new cljs.core.Keyword(null,"doc","doc",1913296891),"The lifecycle entries for this job"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"any","any",1705907423)], null),new cljs.core.Keyword(null,"doc","doc",1913296891),"The parameter sequence to be applied to the function that this task uses"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"serialized-task","serialized-task",-1444555797),new cljs.core.Keyword(null,"doc","doc",1913296891),"The task that this peer is executing that has been serialized to ZooKeeper"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"channel","channel",734187692),new cljs.core.Keyword(null,"doc","doc",1913296891),"Signalling channel used to kill the peer"], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"doc","doc",1913296891),"The trigger entries for this job"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"All options available to configure the virtual peers and development environment.",new cljs.core.Keyword(null,"link","link",-1769163468),null,new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword("onyx.peer","retry-start-interval","onyx.peer/retry-start-interval",-1235138208),new cljs.core.Keyword("onyx.peer","stop-task-timeout-ms","onyx.peer/stop-task-timeout-ms",536687168),new cljs.core.Keyword("onyx.rocksdb.filter","peer-block-cache-size","onyx.rocksdb.filter/peer-block-cache-size",-257999711),new cljs.core.Keyword("onyx.peer","storage.s3.multipart-copy-part-size","onyx.peer/storage.s3.multipart-copy-part-size",-23406335),new cljs.core.Keyword("onyx.bookkeeper","read-batch-size","onyx.bookkeeper/read-batch-size",1096282433),new cljs.core.Keyword("onyx.peer","state-log-impl","onyx.peer/state-log-impl",-1652439167),new cljs.core.Keyword("onyx.peer","inbox-capacity","onyx.peer/inbox-capacity",1031762338),new cljs.core.Keyword("onyx.bookkeeper","ledger-id-written-back-off","onyx.bookkeeper/ledger-id-written-back-off",-855185726),new cljs.core.Keyword("onyx.bookkeeper","ledger-password","onyx.bookkeeper/ledger-password",703648578),new cljs.core.Keyword("onyx.task-scheduler.colocated","only-send-local?","onyx.task-scheduler.colocated/only-send-local?",-49365949),new cljs.core.Keyword("onyx.peer","publisher-liveness-timeout-ms","onyx.peer/publisher-liveness-timeout-ms",536288099),new cljs.core.Keyword("onyx","tenancy-id","onyx/tenancy-id",-1387279421),new cljs.core.Keyword("onyx.peer","storage.timeout","onyx.peer/storage.timeout",1638465475),new cljs.core.Keyword("onyx.bookkeeper","client-throttle","onyx.bookkeeper/client-throttle",-606948316),new cljs.core.Keyword("onyx.messaging","allow-short-circuit?","onyx.messaging/allow-short-circuit?",-1704052220),new cljs.core.Keyword("onyx.peer","join-failure-back-off","onyx.peer/join-failure-back-off",-1619886811),new cljs.core.Keyword("onyx.rocksdb.filter","num-buckets","onyx.rocksdb.filter/num-buckets",-994960795),new cljs.core.Keyword("onyx.peer","storage","onyx.peer/storage",714035077),new cljs.core.Keyword("onyx.peer","storage.s3.accelerate?","onyx.peer/storage.s3.accelerate?",-1130241978),new cljs.core.Keyword("onyx.bookkeeper","write-buffer-size","onyx.bookkeeper/write-buffer-size",313906438),new cljs.core.Keyword("onyx.peer","storage.s3.auth.secret-key","onyx.peer/storage.s3.auth.secret-key",556598566),new cljs.core.Keyword("onyx.messaging.aeron","offer-idle-strategy","onyx.messaging.aeron/offer-idle-strategy",738857254),new cljs.core.Keyword("onyx.peer","job-not-ready-back-off","onyx.peer/job-not-ready-back-off",348914406),new cljs.core.Keyword("onyx.peer","coordinator-max-sleep-ms","onyx.peer/coordinator-max-sleep-ms",-409574682),new cljs.core.Keyword("onyx.messaging","compress-fn","onyx.messaging/compress-fn",-751146010),new cljs.core.Keyword("onyx.peer","idle-min-sleep-ns","onyx.peer/idle-min-sleep-ns",-1970446105),new cljs.core.Keyword("onyx.peer","drained-back-off","onyx.peer/drained-back-off",498278632),new cljs.core.Keyword("onyx.zookeeper","backoff-max-retries","onyx.zookeeper/backoff-max-retries",1231536936),new cljs.core.Keyword("onyx.bookkeeper","client-timeout","onyx.bookkeeper/client-timeout",-1255720024),new cljs.core.Keyword("onyx.bookkeeper","write-batch-size","onyx.bookkeeper/write-batch-size",-863587991),new cljs.core.Keyword("onyx.peer","subscriber-liveness-timeout-ms","onyx.peer/subscriber-liveness-timeout-ms",1428814185),new cljs.core.Keyword("onyx.bookkeeper","write-batch-backoff","onyx.bookkeeper/write-batch-backoff",-1541666263),new cljs.core.Keyword("onyx.peer","storage.s3.auth-type","onyx.peer/storage.s3.auth-type",-846374676),new cljs.core.Keyword("onyx.peer","state-filter-impl","onyx.peer/state-filter-impl",599541228),new cljs.core.Keyword("onyx.messaging.aeron","publication-creation-timeout","onyx.messaging.aeron/publication-creation-timeout",-1284510771),new cljs.core.Keyword("onyx.query.server","ip","onyx.query.server/ip",-1162256274),new cljs.core.Keyword("onyx.messaging.aeron","subscriber-count","onyx.messaging.aeron/subscriber-count",-1978303730),new cljs.core.Keyword("onyx.peer","storage.s3.endpoint","onyx.peer/storage.s3.endpoint",-1553286226),new cljs.core.Keyword("onyx.messaging","external-addr","onyx.messaging/external-addr",-1613358609),new cljs.core.Keyword("onyx.peer","storage.s3.multipart-copy-threshold","onyx.peer/storage.s3.multipart-copy-threshold",969880111),new cljs.core.Keyword("onyx.peer","storage.s3.region","onyx.peer/storage.s3.region",1088539343),new cljs.core.Keyword("onyx.windowing","min-value","onyx.windowing/min-value",189136591),new cljs.core.Keyword("onyx.rocksdb.filter","bloom-filter-bits","onyx.rocksdb.filter/bloom-filter-bits",524655407),new cljs.core.Keyword("onyx.rocksdb.filter","num-ids-per-bucket","onyx.rocksdb.filter/num-ids-per-bucket",1702890512),new cljs.core.Keyword("onyx.peer.metrics","lifecycles","onyx.peer.metrics/lifecycles",1062523280),new cljs.core.Keyword("onyx.messaging","impl","onyx.messaging/impl",419530192),new cljs.core.Keyword("onyx.zookeeper","prepare-failure-detection-interval","onyx.zookeeper/prepare-failure-detection-interval",-621428399),new cljs.core.Keyword("onyx.peer","fn-params","onyx.peer/fn-params",-1543429359),new cljs.core.Keyword("onyx.bookkeeper","ledger-quorum-size","onyx.bookkeeper/ledger-quorum-size",-596523215),new cljs.core.Keyword("onyx.peer","idle-max-sleep-ns","onyx.peer/idle-max-sleep-ns",846957425),new cljs.core.Keyword("onyx.zookeeper","backoff-max-sleep-time-ms","onyx.zookeeper/backoff-max-sleep-time-ms",131276947),new cljs.core.Keyword("onyx.log","config","onyx.log/config",411056883),new cljs.core.Keyword("onyx.messaging","peer-port","onyx.messaging/peer-port",-708594476),new cljs.core.Keyword("onyx.peer","storage.s3.encryption","onyx.peer/storage.s3.encryption",-883576492),new cljs.core.Keyword("onyx.query.server","port","onyx.query.server/port",1941450325),new cljs.core.Keyword("onyx.peer","trigger-timer-resolution","onyx.peer/trigger-timer-resolution",678905557),new cljs.core.Keyword("onyx.rocksdb.filter","block-size","onyx.rocksdb.filter/block-size",2085005526),new cljs.core.Keyword("onyx","id","onyx/id",-1375545066),new cljs.core.Keyword("onyx.messaging","short-circuit-buffer-size","onyx.messaging/short-circuit-buffer-size",1027918582),new cljs.core.Keyword("onyx.peer","coordinator-barrier-period-ms","onyx.peer/coordinator-barrier-period-ms",374723382),new cljs.core.Keyword("zookeeper","address","zookeeper/address",12632054),new cljs.core.Keyword("onyx.peer","tags","onyx.peer/tags",-1529883273),new cljs.core.Keyword("onyx.rocksdb.filter","compression","onyx.rocksdb.filter/compression",1708824983),new cljs.core.Keyword("onyx.rocksdb.filter","rotation-check-interval-ms","onyx.rocksdb.filter/rotation-check-interval-ms",-1345878505),new cljs.core.Keyword("onyx.zookeeper","backoff-base-sleep-time-ms","onyx.zookeeper/backoff-base-sleep-time-ms",1258198647),new cljs.core.Keyword("onyx.messaging","decompress-fn","onyx.messaging/decompress-fn",-1849717833),new cljs.core.Keyword("onyx.bookkeeper","ledger-ensemble-size","onyx.bookkeeper/ledger-ensemble-size",1236159896),new cljs.core.Keyword("onyx.messaging.aeron","poll-idle-strategy","onyx.messaging.aeron/poll-idle-strategy",1139046072),new cljs.core.Keyword("onyx.peer","initial-sync-backoff-ms","onyx.peer/initial-sync-backoff-ms",-510014760),new cljs.core.Keyword("onyx.peer","job-scheduler","onyx.peer/job-scheduler",-1294668840),new cljs.core.Keyword("onyx.messaging.aeron","embedded-driver?","onyx.messaging.aeron/embedded-driver?",446016537),new cljs.core.Keyword("onyx.peer","outbox-capacity","onyx.peer/outbox-capacity",632105721),new cljs.core.Keyword("onyx.rocksdb.filter","base-dir","onyx.rocksdb.filter/base-dir",-1174849671),new cljs.core.Keyword("onyx.messaging.aeron","embedded-media-driver-threading","onyx.messaging.aeron/embedded-media-driver-threading",559619034),new cljs.core.Keyword("onyx.query","server?","onyx.query/server?",-2030005219),new cljs.core.Keyword("onyx.messaging","bind-addr","onyx.messaging/bind-addr",2090466014),new cljs.core.Keyword("onyx.messaging.aeron","write-buffer-size","onyx.messaging.aeron/write-buffer-size",359494462),new cljs.core.Keyword("onyx.peer","storage.s3.bucket","onyx.peer/storage.s3.bucket",688290718),new cljs.core.Keyword("onyx.peer","peer-not-ready-back-off","onyx.peer/peer-not-ready-back-off",-35609505),new cljs.core.Keyword("onyx.monitoring","config","onyx.monitoring/config",-1456705441),new cljs.core.Keyword("onyx.peer","heartbeat-ms","onyx.peer/heartbeat-ms",70073471),new cljs.core.Keyword("onyx.peer","storage.s3.auth.access-key","onyx.peer/storage.s3.auth.access-key",-809081249)],[new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms to wait before trying to reboot a virtual peer after failure.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"default","default",-1987822328),(2000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms to wait on stopping a task before allowing a peer to be scheduled to a new task",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),(20000),new cljs.core.Keyword(null,"added","added",2057651688),"0.9.7"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"RocksDB block cache size in bytes. Larger caches reduce the chance that the peer will need to check for the presence of a uniqueness key on disk. Defaults to 100MB.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(104857600),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Sets the minimum part size in bytes for each part in a multi-part copy request. This setting may be useful when tuning checkpointing, but please benchmark your use. Sets [TransferManager Configuration](http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/transfer/TransferManagerConfiguration.html#setMultipartCopyPartSize-long-) internally.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of bookkeeper ledger entries to read at a time when recovering state. Effective batch read of state entries is write-batch-size * read-batch-size.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Choice of state persistence implementation.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"bookkeeper","bookkeeper",548142650),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"bookkeeper","bookkeeper",548142650)], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Maximum number of messages to try to pre-fetch and store in the inbox, since reading from the log happens asynchronously.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"messages","messages",345434482),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of milliseconds to back off (sleep) after writing BookKeeper ledger id to the replica.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Password to use for Onyx state persisted to BookKeeper ledgers. Highly recommended this is changed on cluster wide basis.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),"INSECUREDEFAULTPASSWORD",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"When this peer is running a task for a job with a co-located task scheduler and this value is true, this peer will only send messages to segments local to its machine. It is desirable to set this to false when you want tasks to be perfectly uniformly spread over the machines in your cluster, but do not want jobs to run entirely locally.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.4"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms between heartbeats before a publisher is determined to be dead.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"default","default",-1987822328),(60000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The ID for the cluster that the peers will coordinate through. Provides a means for strong, multi-tenant isolation of peers.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"one-of","one-of",144367098),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"uuid","uuid",-2145095719)], null)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Peer will timeout checkpointing after storage.timeout ms has passed.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(120000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Tunable write throttle for BookKeeper ledgers.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(30000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A boolean denoting whether to allow virtual peers to short circuit networked messaging when co-located with the other virtual peer. Short circuiting allows for direct transfer of messages to a virtual peer's internal buffers, which improves performance where possible. This configuration option is primarily for use in performance testing, as peers will not generally be able to short circuit messaging after scaling to many nodes.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Mean number of ms to wait before trying to rejoin the cluster after a previous join attempt has aborted.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"default","default",-1987822328),(200),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of rotating filter buckets to use. Buckets are rotated every `:onyx.rocksdb.filter/num-ids-per-bucket`, with the oldest bucket being discarded if num-buckets already exist.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(10),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Storage type to use for checkpointing.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"s3","s3",969970109),new cljs.core.Keyword(null,"zookeeper","zookeeper",17281735)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"zookeeper","zookeeper",17281735),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Boolean that sets whether to use [S3 transfer acceleration](http://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html), for use when `:onyx.peer/storage` is set to `s3`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),false,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Size of the buffer to which BookKeeper ledger writes are buffered via.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(10000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The S3 auth access key for the checkpointing module.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx.peer/storage.s3.auth-type` is :config."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The Aeron idle strategy to use between when offering messages to another peer. Currently, two choices `:high-restart-latency` and `:low-restart-latency` can be chosen. low-restart-latency may result in lower latency message, at the cost of higher CPU usage or potentially reduced throughput.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"high-restart-latency","high-restart-latency",824291080),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"high-restart-latency","high-restart-latency",824291080),new cljs.core.Keyword(null,"low-restart-latency","low-restart-latency",585970780)], null),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Idle strategy was removed in 0.10.0.",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms to back off and wait before trying to discover configuration needed to start the subscription after discovery failure.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),(100),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The maximum amount of time that the coordinator will sleep when there are no actions to be taken. Should be less than `:onyx.peer/coordinator-barrier-period-ms` for optimal functioning of barrier emission.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(10),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The Clojure function to use for messaging compression. Receives one argument - a sequence of segments. Must return a byte array representing the segment seq.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Custom serialization functions are currently deprecated, however they may return in the future if there is demand.",new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Symbol("onyx.compression.nippy","compress","onyx.compression.nippy/compress",-587503273,null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of nanoseconds an idle peer should sleep for when blocked in a particular lifecycle stage. Higher numbers will reduce CPU load when peer is relatively idle. Defaults to 0.05 milliseconds, or 50000 nanoseconds.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"nanosecond","nanosecond",-175977265),new cljs.core.Keyword(null,"default","default",-1987822328),(50000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms to wait before trying to complete the job if all input tasks have been exhausted.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"default","default",-1987822328),(100),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Maximum number of times to retry connecting to ZooKeeper",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(5),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"BookKeeper client timeout.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(60000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of state persistence writes to batch into a single BookKeeper ledger entry.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(20),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms between heartbeats before a subscriber is determined to be dead.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"default","default",-1987822328),(60000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Maximum amount of time to backoff after receiving state entries to write to BookKeeper.",new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.5"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Authentication method to use for authenticating with S3 for checkpointing. The default, :provider, will use the [AWS Credentials Provider Chain](http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html). Use of :config will allow both `:onyx.peer/storage.s3.auth.access-key` and `:onyx.peer/storage.s3.auth.secret-key` to be provided via the peer-config.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"provider-chain","provider-chain",-1002433193),new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Choice of uniqueness key filtering implementation.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"rocksdb","rocksdb",-1624670381),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rocksdb","rocksdb",-1624670381)], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Timeout after a number of ms on attempting to create an Aeron publication",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Publication creation timeout was removed in 0.10.0.",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The IP the http query server should listen on.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),"0.0.0.0",new cljs.core.Keyword(null,"added","added",2057651688),"0.9.10"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The number of Aeron subscriber threads that receive messages for the peer-group.  As peer-groups are generally configured per-node (machine), this setting can bottleneck receive performance if many virtual peers are used per-node, or are receiving and/or de-serializing large volumes of data. A good guideline is is `num cores = num virtual peers + num subscribers`, assuming virtual peers are generally being fully utilized.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(2),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Dedicated subscribers were removed in 0.10.0.",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Override the default s3 endpoint.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"An IP address to advertise to other peers. Useful in case of firewalling, port forwarding, etc, where the interface/IP that is bound is different to the address that other peers should connect to.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Sets the size threshold in bytes for when to use multipart uploads. This setting may be useful when tuning checkpointing, but please benchmark your use. Sets [TransferManager Configuration](http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/transfer/TransferManagerConfiguration.html#setMultipartUploadThreshold-long-) internally.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"S3 region endpoint to use for checkpointing when `:onyx.peer/storage` is `:s3`. IMPORTANT: this will not set the region on the bucket, just the endpoint used. Ensure you have created your bucket in an appropriate region.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A default strict minimum value that `:window/window-key` can ever be. Note, this is generally best configured individually via :window/min-value in the task map.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),(0),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of bloom filter bits to use per uniqueness key value",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(10),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of uniqueness key values that can exist in a RocksDB filter bucket.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(10000000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Onyx can provide metrics for all lifecycle stages. Simply provide the lifecycle stages to monitor them. Note that tracking all lifecycles may cause a performance hit depending on your workload.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("lifecycle","unblock-subscribers","lifecycle/unblock-subscribers",1388627717),null,new cljs.core.Keyword("lifecycle","write-batch","lifecycle/write-batch",145186028),null,new cljs.core.Keyword("lifecycle","apply-fn","lifecycle/apply-fn",1540189645),null,new cljs.core.Keyword("lifecycle","read-batch","lifecycle/read-batch",1187153170),null], null), null),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 29, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("lifecycle","poll-recover","lifecycle/poll-recover",-1804437826),new cljs.core.Keyword("lifecycle","offer-barriers","lifecycle/offer-barriers",-348532241),new cljs.core.Keyword("lifecycle","offer-barrier-status","lifecycle/offer-barrier-status",1859527457),new cljs.core.Keyword("lifecycle","recover-input","lifecycle/recover-input",-1983670105),new cljs.core.Keyword("lifecycle","recover-state","lifecycle/recover-state",1279849464),new cljs.core.Keyword("lifecycle","recover-output","lifecycle/recover-output",-1152536654),new cljs.core.Keyword("lifecycle","unblock-subscribers","lifecycle/unblock-subscribers",1388627717),new cljs.core.Keyword("lifecycle","next-iteration","lifecycle/next-iteration",-1414702504),new cljs.core.Keyword("lifecycle","input-poll-barriers","lifecycle/input-poll-barriers",-1512216681),new cljs.core.Keyword("lifecycle","check-publisher-heartbeats","lifecycle/check-publisher-heartbeats",1978157961),new cljs.core.Keyword("lifecycle","seal-barriers?","lifecycle/seal-barriers?",85345672),new cljs.core.Keyword("lifecycle","seal-barriers?","lifecycle/seal-barriers?",85345672),new cljs.core.Keyword("lifecycle","checkpoint-input","lifecycle/checkpoint-input",768844618),new cljs.core.Keyword("lifecycle","checkpoint-state","lifecycle/checkpoint-state",819144244),new cljs.core.Keyword("lifecycle","checkpoint-output","lifecycle/checkpoint-output",616643624),new cljs.core.Keyword("lifecycle","offer-barriers","lifecycle/offer-barriers",-348532241),new cljs.core.Keyword("lifecycle","offer-barrier-status","lifecycle/offer-barrier-status",1859527457),new cljs.core.Keyword("lifecycle","unblock-subscribers","lifecycle/unblock-subscribers",1388627717),new cljs.core.Keyword("lifecycle","before-batch","lifecycle/before-batch",-1874470000),new cljs.core.Keyword("lifecycle","read-batch","lifecycle/read-batch",1187153170),new cljs.core.Keyword("lifecycle","check-publisher-heartbeats","lifecycle/check-publisher-heartbeats",1978157961),new cljs.core.Keyword("lifecycle","after-read-batch","lifecycle/after-read-batch",886096329),new cljs.core.Keyword("lifecycle","apply-fn","lifecycle/apply-fn",1540189645),new cljs.core.Keyword("lifecycle","after-apply-fn","lifecycle/after-apply-fn",1798612181),new cljs.core.Keyword("lifecycle","assign-windows","lifecycle/assign-windows",189506448),new cljs.core.Keyword("lifecycle","prepare-batch","lifecycle/prepare-batch",-426699236),new cljs.core.Keyword("lifecycle","write-batch","lifecycle/write-batch",145186028),new cljs.core.Keyword("lifecycle","after-batch","lifecycle/after-batch",-1396955646),new cljs.core.Keyword("lifecycle","offer-heartbeats","lifecycle/offer-heartbeats",-161785456)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The messaging protocol to use for peer-to-peer communication.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aeron","aeron",-1186183155)], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms to wait between checking if the peer that joins this peer via prepare has failed. This value is used within a loop to periodically detect a false-positive case where a ZooKeeper ephemeral node is still present even though the process has (recently died). This value is only used within the prepare phase of joining a peer, and is not used for the normal failure detection path when a peer has fully joined the cluster.",new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.3"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A map of keywords to vectors. Keywords represent task names, vectors represent the first parameters to apply to the function represented by the task. For example, `{:add [42]}` for task `:add` will call the function underlying `:add` with `(f 42 <segment>)` This will apply to any job with this task name.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The number of BookKeeper instances over which entries will be written to. For example, if you have an ledger-ensemble-size of 3, and a ledger-quorum-size of 2, the first write will be written to server1 and server2, the second write will be written to server2, and server3, etc.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(3),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of nanoseconds an idle peer should sleep for when blocked in a particular lifecycle stage. Higher numbers will reduce CPU load when peer is relatively idle. Defaults to 0.5 milliseconds, or 500000 nanoseconds.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"nanosecond","nanosecond",-175977265),new cljs.core.Keyword(null,"default","default",-1987822328),(500000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Maximum amount of time in ms to sleep on each retry",new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(30000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Timbre logging configuration for the peers. See [Logging](http://www.onyxplatform.org/docs/user-guide/latest/logging.html).",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.Keyword(null,"added","added",2057651688),"0.6.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Port that peers should use to communicate.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Enum for which s3 encryption type to use when `:onyx.peer/storage` is set to `s3`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aes256","aes256",455110466),new cljs.core.Keyword(null,"none","none",1333468478)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"none","none",1333468478),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The port the http query server should liston on",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),(8080)], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The resolution of the timer firing state-events that are not caused by segments arriving.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"units","units",-533089095),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Timer resolution was deprecated in 0.10.0.",new cljs.core.Keyword(null,"default","default",-1987822328),(100),new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"RocksDB block size. May worth being tuned depending on the size of your uniqueness-key values.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(4096),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The ID for the cluster that the peers will coordinate via. Provides a way to provide strong, multi-tenant isolation of peers.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"one-of","one-of",144367098),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"uuid","uuid",-2145095719)], null)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0",new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.9.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":onyx/id has been renamed :onyx/tenancy-id for clarity. Update all :onyx/id keys accordingly."], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Maximum number of batches multiplied by consuming peer, per short circuit buffer. This affects memory consumption, and performance.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A coordinator will send another barrier if it has been `:onyx.peer/coordinator-barrier-period-ms` ms since it last sent a barrier.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The addresses of the ZooKeeper servers to use for coordination e.g. 192.168.1.1:2181,192.168.1.2:2181",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Tags which denote the capabilities of this peer in terms of user-defined functionality.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"keyword","keyword",811389747)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"default","default",-1987822328),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.9"], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Whether to use compression in rocksdb filter. It is recommended that `:none` is used unless your uniqueness keys are large and compressible.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"bzip2","bzip2",-981034039),new cljs.core.Keyword(null,"lz4","lz4",1295538927),new cljs.core.Keyword(null,"lz4hc","lz4hc",-577287921),new cljs.core.Keyword(null,"none","none",1333468478),new cljs.core.Keyword(null,"snappy","snappy",959343788),new cljs.core.Keyword(null,"zlib","zlib",-472595159)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"none","none",1333468478),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Check whether filter bucket should be rotated every interval ms",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Initial amount of time to wait between ZooKeeper connection retries",new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The Clojure function to use for messaging decompression. Receives one argument - a byte array. Must return the decompressed value of the byte array.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Custom serialization functions are currently deprecated, however they may return in the future if there is demand.",new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Symbol("onyx.compression.nippy","decompress","onyx.compression.nippy/decompress",-2045421911,null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The number of BookKeeper instances over which entries will be striped. For example, if you have an ledger-ensemble-size of 3, and a ledger-quorum-size of 2, the first write will be written to server1 and server2, the second write will be written to server2, and server3, etc.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Incremental log implementation was deprecated in 0.10.0",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(3),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The Aeron idle strategy to use between when polling for new messages. Currently, two choices `:high-restart-latency` and `:low-restart-latency` can be chosen. low-restart-latency may result in lower latency message, at the cost of higher CPU usage or potentially reduced throughput.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"high-restart-latency","high-restart-latency",824291080),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"high-restart-latency","high-restart-latency",824291080),new cljs.core.Keyword(null,"low-restart-latency","low-restart-latency",585970780)], null),new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Backoff when waiting for all of the peers to signal readiness to each other.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(50),new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Each running Onyx instance is configured with exactly one job scheduler. The purpose of the job scheduler is to coordinate which jobs peers are allowed to volunteer to execute.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("onyx.job-scheduler","percentage","onyx.job-scheduler/percentage",1776937193),new cljs.core.Keyword("onyx.job-scheduler","balanced","onyx.job-scheduler/balanced",183696066),new cljs.core.Keyword("onyx.job-scheduler","greedy","onyx.job-scheduler/greedy",-176309193)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A boolean denoting whether an Aeron media driver should be started up with the environment. See [this example](https://github.com/onyx-platform/onyx/blob/026dce2ca5494999e0abe3deeb5e9d0fdc7ef09f/src/onyx/messaging/aeron_media_driver.clj) for an example for how to start the media driver externally.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"default","default",-1987822328),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Maximum number of messages to buffer in the outbox for writing, since writing to the log happens asynchronously.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"messages","messages",345434482),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Temporary directory to persist uniqueness filtering data.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"State filter was deprecated in 0.10.0",new cljs.core.Keyword(null,"default","default",-1987822328),"/tmp/rocksdb_filter",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Threading mode to use with the embedded media driver.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"dedicated","dedicated",-1856259043),new cljs.core.Keyword(null,"shared","shared",-384145993),new cljs.core.Keyword(null,"shared-network","shared-network",293213484)], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"shared","shared",-384145993),new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Bool to denote wether the peer-group should start a http server that can be queried for replica state and job information",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.10"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"An IP address to bind the peer to for messaging. Defaults to `nil`. On AWS EC2, it's generally enough to configure this to the result of `(slurp http://169.254.169.254/latest/meta-data/local-ipv4)`",new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Size of the write queue for the Aeron publication. Writes to this queue will currently block once full.",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"default","default",-1987822328),(1000),new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),"Write buffer was removed in 0.10.0.",new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"S3 bucket to use for checkpointing when `:onyx.peer/storage` is `:s3`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms to back off and wait before retrying the call to `start-task?` lifecycle hook if it returns false.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"milliseconds","milliseconds",-1238025512),new cljs.core.Keyword(null,"default","default",-1987822328),(100),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Monitoring configuration. Use this to supply functions that update metrics.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"monitoring","monitoring",-274976896),new cljs.core.Keyword(null,"no-op","no-op",-93046065)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Number of ms an idle peer should wait before sending a heartbeat message, and checking whether other peers are alive. This should be smaller than `:onyx.peer/subscriber-liveness-timeout-ms` and `:onyx.peer/publisher-liveness-timeout-ms`.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"integer","integer",-604721710),new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"default","default",-1987822328),(500),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"The S3 auth secret-key key for the checkpointing module.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"required-when","required-when",-247893371),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`:onyx.peer/storage.s3.auth-type` is :config."], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.10.0"], null)])], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"summary","summary",380847952),"Onyx provides the ability to perform state refinements after triggers fired.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#_refinement_modes",new cljs.core.Keyword(null,"model","model",331153215),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("refinement","create-state-update","refinement/create-state-update",-1610669832),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (trigger, state, state-event) to generate a serializable state machine update.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),new cljs.core.Keyword("refinement","apply-state-update","refinement/apply-state-update",-1044493007),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Fn (trigger, state, entry) to apply the refinement state machine update entry to a state.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null)], null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"summary","summary",380847952),"An Onyx job is defined in data and submitted to a a cluster for execution. It takes a map with keys :catalog, :workflow, :flow-conditions, :windows, :triggers, :metadata, and :task-scheduler. Returns a map of :job-id and :task-ids, which map to a UUID and vector of maps respectively. :metadata is a map of values that must serialize to EDN. :metadata will be logged with all task output, and is useful for identifying a particular task based on something other than its name or ID.",new cljs.core.Keyword(null,"model","model",331153215),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"resume-point","resume-point",1043151683),new cljs.core.Keyword(null,"lifecycles","lifecycles",-839774043),new cljs.core.Keyword(null,"windows","windows",2068861701),new cljs.core.Keyword("acker","exempt-tasks","acker/exempt-tasks",-1903074645),new cljs.core.Keyword(null,"triggers","triggers",-1443678770),new cljs.core.Keyword(null,"task-scheduler","task-scheduler",-1395479890),new cljs.core.Keyword(null,"percentage","percentage",-1610213650),new cljs.core.Keyword("acker","exempt-input-tasks?","acker/exempt-input-tasks?",261248271),new cljs.core.Keyword(null,"workflow","workflow",-640694607),new cljs.core.Keyword("acker","percentage","acker/percentage",-1182757384),new cljs.core.Keyword(null,"flow-conditions","flow-conditions",-833083495),new cljs.core.Keyword("acker","exempt-output-tasks?","acker/exempt-output-tasks?",-1049872165),new cljs.core.Keyword(null,"metadata","metadata",1799301597),new cljs.core.Keyword(null,"catalog","catalog",-439057154)],[new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Resume points allow job state to be resumed by new jobs. See the documentation for more information.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.Keyword(null,"parameters","parameters",-1229919748),"#/resume-point",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#resume-point",new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.1.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Lifecycles are a feature that allow you to control code that executes at particular points during task execution on each peer. Lifecycles are data driven and composable.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#lifecycles",new cljs.core.Keyword(null,"parameters","parameters",-1229919748),"#/lifecycle-entry",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.1.0"], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Windows allow you to group and accrue data into possibly overlapping buckets. Windows are intimately related to the Triggers feature.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993),new cljs.core.Keyword(null,"windows","windows",2068861701),new cljs.core.Keyword(null,"triggers","triggers",-1443678770),new cljs.core.Keyword(null,"state","state",-1988618099)], null),new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#windowing-and-aggregation",new cljs.core.Keyword(null,"parameters","parameters",-1229919748),"#/window-entry",new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"tags","tags",1771418977),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":acker/exempt-tasks was deprecated in 0.10.0 when ackers were removed."], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Triggers are a feature that interact with windows. Windows capture and bucket data over time. Triggers let you release the captured data over a variety stimuli.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#triggers",new cljs.core.Keyword(null,"parameters","parameters",-1229919748),"#/trigger-entry",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993),new cljs.core.Keyword(null,"windows","windows",2068861701),new cljs.core.Keyword(null,"state","state",-1988618099)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.8.0"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Task scheduler setting",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("onyx.task-scheduler","balanced","onyx.task-scheduler/balanced",1248509866),new cljs.core.Keyword("onyx.task-scheduler","percentage","onyx.task-scheduler/percentage",-1451094655),new cljs.core.Keyword("onyx.task-scheduler","colocated","onyx.task-scheduler/colocated",1949311946)], null),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.1.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"doc","doc",1913296891),"For use with percentage job scheduler. Defines the percentage of the peers in the cluster that the job should receive.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.1.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"tags","tags",1771418977),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":acker/exempt-input-tasks? was deprecated in 0.10.0 when ackers were removed."], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"A workflow is the structural specification of an Onyx program. Its purpose is to articulate the paths that data flows through the cluster at runtime. It is specified via a directed, acyclic graph. A workflow comprises a vector of two element vectors, each containing two tasks name keywords.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"examples","examples",-473712556),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Simple workflow example, showing :in task, flowing to two :intermediate tasks, each flowing to the same output task.",new cljs.core.Keyword(null,"example","example",-1755779144),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"in","in",-1531184865),new cljs.core.Keyword(null,"intermediate1","intermediate1",-2018833847)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"in","in",-1531184865),new cljs.core.Keyword(null,"intermediate2","intermediate2",-1189891018)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"intermediate1","intermediate1",-2018833847),new cljs.core.Keyword(null,"out1","out1",466763873)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"intemediate2","intemediate2",-1860193684),new cljs.core.Keyword(null,"out2","out2",810111991)], null)], null)], null)], null),new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#_workflow",new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),false,new cljs.core.Keyword(null,"added","added",2057651688),"0.1.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"double","double",884886883),new cljs.core.Keyword(null,"tags","tags",1771418977),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":acker/percentage was deprecated in  0.10.0 when ackers were removed."], null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Flow conditions are used for isolating logic about whether or not segments should pass through different tasks in a workflow, and support a rich degree of composition with runtime parameterization.",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"vector","vector",1902966158),new cljs.core.Keyword(null,"parameters","parameters",-1229919748),"#/flow-conditions-entry",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#flow-conditions",new cljs.core.Keyword(null,"examples","examples",-473712556),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Exmaple flow conditions (note, this is an incomplete job).",new cljs.core.Keyword(null,"example","example",-1755779144),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"workflow","workflow",-640694607),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword(null,"process-children","process-children",-1070756664)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword(null,"process-adults","process-adults",1927604664)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword(null,"process-female-athletes","process-female-athletes",1778662138)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword(null,"process-everyone","process-everyone",1603258066)], null)], null),new cljs.core.Keyword(null,"flow-conditions","flow-conditions",-833083495),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("flow","from","flow/from",1812137506),new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword("flow","to","flow/to",188953993),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"process-children","process-children",-1070756664)], null),new cljs.core.Keyword("my","max-child-age","my/max-child-age",-483680659),(17),new cljs.core.Keyword("flow","predicate","flow/predicate",-1745647926),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("my.ns","child?","my.ns/child?",571925199),new cljs.core.Keyword("my","max-child-age","my/max-child-age",-483680659)], null),new cljs.core.Keyword("flow","doc","flow/doc",2050658917),"Emits segment if this segment is a child."], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("flow","from","flow/from",1812137506),new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword("flow","to","flow/to",188953993),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"process-adults","process-adults",1927604664)], null),new cljs.core.Keyword("flow","predicate","flow/predicate",-1745647926),new cljs.core.Keyword("my.ns","adult?","my.ns/adult?",-439725976),new cljs.core.Keyword("flow","doc","flow/doc",2050658917),"Emits segment if this segment is an adult."], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("flow","from","flow/from",1812137506),new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword("flow","to","flow/to",188953993),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"process-female-athletes","process-female-athletes",1778662138)], null),new cljs.core.Keyword("flow","predicate","flow/predicate",-1745647926),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.Keyword("my.ns","female?","my.ns/female?",1506791061),new cljs.core.Keyword("my.ns","athlete?","my.ns/athlete?",2062541791)], null),new cljs.core.Keyword("flow","doc","flow/doc",2050658917),"Emits segment if this segment is a female athlete."], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("flow","from","flow/from",1812137506),new cljs.core.Keyword(null,"input-stream","input-stream",-179909472),new cljs.core.Keyword("flow","to","flow/to",188953993),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"process-everyone","process-everyone",1603258066)], null),new cljs.core.Keyword("flow","predicate","flow/predicate",-1745647926),new cljs.core.Keyword("my.ns","constantly-true","my.ns/constantly-true",-1024936520),new cljs.core.Keyword("flow","doc","flow/doc",2050658917),"Always emit this segment"], null)], null)], null)], null)], null)], null),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.5.0"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"any","any",1705907423),new cljs.core.Keyword(null,"tags","tags",1771418977),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431),"0.10.0",new cljs.core.Keyword(null,"deprecation-doc","deprecation-doc",-1193210804),":acker/exempt-output-tasks? was deprecated in 0.10.0 when ackers were removed."], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Map of metadata to be associated with the job. Supports the supply of `:job-id` as a UUID, which will allow idempotent job submission. Metadata can be accessed from tasks via `:onyx.core/metadata` in the event map.",new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),"http://www.onyxplatform.org/docs/user-guide/latest/#submit-job",new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),new cljs.core.Keyword(null,"optional?","optional?",1184638129),true,new cljs.core.Keyword(null,"added","added",2057651688),"0.9.0"], null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"tags","tags",1771418977),new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"doc-url","doc-url",1059861130),new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.Keyword(null,"choices","choices",1385611597),new cljs.core.Keyword(null,"optional?","optional?",1184638129),new cljs.core.Keyword(null,"examples","examples",-473712556),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"cheat-sheet-url","cheat-sheet-url",186628350)],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"task","task",-1476607993)], null),"0.1.0","http://www.onyxplatform.org/docs/user-guide/latest/#_catalog",new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.Keyword(null,"any","any",1705907423),false,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Simple Catalog Example",new cljs.core.Keyword(null,"example","example",-1755779144),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword("onyx","name","onyx/name",1848664427),new cljs.core.Keyword(null,"in","in",-1531184865),new cljs.core.Keyword("onyx","plugin","onyx/plugin",-1694913021),new cljs.core.Keyword("onyx.plugin.core-async","input","onyx.plugin.core-async/input",-1349951628),new cljs.core.Keyword("onyx","type","onyx/type",1170345418),new cljs.core.Keyword(null,"input","input",556931961),new cljs.core.Keyword("onyx","medium","onyx/medium",-1885528026),new cljs.core.Keyword(null,"core.async","core.async",-505018286),new cljs.core.Keyword("onyx","batch-size","onyx/batch-size",1209135837),(20),new cljs.core.Keyword("onyx","max-peers","onyx/max-peers",-1096140691),(1),new cljs.core.Keyword("onyx","doc","onyx/doc",2050978421),"Reads segments from a core.async channel"], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("onyx","name","onyx/name",1848664427),new cljs.core.Keyword(null,"inc","inc",-1316026094),new cljs.core.Keyword("onyx","fn","onyx/fn",-1172046942),new cljs.core.Keyword("onyx.peer.min-peers-test","my-inc","onyx.peer.min-peers-test/my-inc",1170236407),new cljs.core.Keyword("onyx","type","onyx/type",1170345418),new cljs.core.Keyword(null,"function","function",-2127255473),new cljs.core.Keyword("onyx","batch-size","onyx/batch-size",1209135837),(20)], null),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword("onyx","name","onyx/name",1848664427),new cljs.core.Keyword(null,"out","out",-910545517),new cljs.core.Keyword("onyx","plugin","onyx/plugin",-1694913021),new cljs.core.Keyword("onyx.plugin.core-async","output","onyx.plugin.core-async/output",728662854),new cljs.core.Keyword("onyx","type","onyx/type",1170345418),new cljs.core.Keyword(null,"output","output",-1105869043),new cljs.core.Keyword("onyx","medium","onyx/medium",-1885528026),new cljs.core.Keyword(null,"core.async","core.async",-505018286),new cljs.core.Keyword("onyx","batch-size","onyx/batch-size",1209135837),(20),new cljs.core.Keyword("onyx","max-peers","onyx/max-peers",-1096140691),(1),new cljs.core.Keyword("onyx","doc","onyx/doc",2050978421),"Writes segments to a core.async channel"], null)], null)], null)], null),"All inputs, outputs, and functions in a workflow must be described via a catalog. A catalog is a vector of maps. Configuration and docstrings are described in the catalog.","http://www.onyxplatform.org/docs/cheat-sheet/latest/#/catalog-entry"])])], null)]);
onyx.information_model.version_deprecations = (function onyx$information_model$version_deprecations(version){
return cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.call(null,cljs.core.comp.call(null,cljs.core.empty_QMARK_,cljs.core.second),cljs.core.map.call(null,(function (p__50999){
var vec__51000 = p__50999;
var k = cljs.core.nth.call(null,vec__51000,(0),null);
var m = cljs.core.nth.call(null,vec__51000,(1),null);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.mapv.call(null,cljs.core.key,cljs.core.filter.call(null,((function (vec__51000,k,m){
return (function (p__51003){
var vec__51004 = p__51003;
var option = cljs.core.nth.call(null,vec__51004,(0),null);
var doc = cljs.core.nth.call(null,vec__51004,(1),null);
return cljs.core._EQ_.call(null,version,new cljs.core.Keyword(null,"deprecated-version","deprecated-version",-579911431).cljs$core$IFn$_invoke$arity$1(doc));
});})(vec__51000,k,m))
,new cljs.core.Keyword(null,"model","model",331153215).cljs$core$IFn$_invoke$arity$1(m)))], null);
}),onyx.information_model.model)));
});
onyx.information_model.model_display_order = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"task-states","task-states",728161571),new cljs.core.Keyword(null,"flow-conditions-entry","flow-conditions-entry",-211720219),new cljs.core.Keyword(null,"catalog-entry","catalog-entry",925067367),new cljs.core.Keyword(null,"env-config","env-config",-2058112276),new cljs.core.Keyword(null,"trigger-entry","trigger-entry",-1417013388),new cljs.core.Keyword(null,"state-aggregation","state-aggregation",-1109896907),new cljs.core.Keyword(null,"window-entry","window-entry",-1287033319),new cljs.core.Keyword(null,"lifecycle-calls","lifecycle-calls",247697209),new cljs.core.Keyword(null,"state-event","state-event",683907162),new cljs.core.Keyword(null,"trigger","trigger",103466139),new cljs.core.Keyword(null,"lifecycle-entry","lifecycle-entry",932450398),new cljs.core.Keyword(null,"event-map","event-map",-558385474),new cljs.core.Keyword(null,"peer-config","peer-config",-1170330561),new cljs.core.Keyword(null,"state-refinement","state-refinement",390984767),new cljs.core.Keyword(null,"job","job",850873087)],[new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"recover","recover",849894427),new cljs.core.Keyword(null,"start-iteration","start-iteration",10803671),new cljs.core.Keyword(null,"barriers","barriers",2029870019),new cljs.core.Keyword(null,"process-batch","process-batch",-1608942378),new cljs.core.Keyword(null,"heartbeat","heartbeat",-1141780952)], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("flow","from","flow/from",1812137506),new cljs.core.Keyword("flow","to","flow/to",188953993),new cljs.core.Keyword("flow","predicate","flow/predicate",-1745647926),new cljs.core.Keyword("flow","predicate-errors-to","flow/predicate-errors-to",1617369323),new cljs.core.Keyword("flow","exclude-keys","flow/exclude-keys",-1649393939),new cljs.core.Keyword("flow","short-circuit?","flow/short-circuit?",1461327862),new cljs.core.Keyword("flow","thrown-exception?","flow/thrown-exception?",-552689668),new cljs.core.Keyword("flow","post-transform","flow/post-transform",38759804),new cljs.core.Keyword("flow","action","flow/action",-1393198010),new cljs.core.Keyword("flow","doc","flow/doc",2050658917)], null),new cljs.core.PersistentVector(null, 25, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("onyx","name","onyx/name",1848664427),new cljs.core.Keyword("onyx","type","onyx/type",1170345418),new cljs.core.Keyword("onyx","batch-size","onyx/batch-size",1209135837),new cljs.core.Keyword("onyx","batch-timeout","onyx/batch-timeout",422744106),new cljs.core.Keyword("onyx","doc","onyx/doc",2050978421),new cljs.core.Keyword("onyx","min-peers","onyx/min-peers",1070508110),new cljs.core.Keyword("onyx","max-peers","onyx/max-peers",-1096140691),new cljs.core.Keyword("onyx","n-peers","onyx/n-peers",1624351917),new cljs.core.Keyword("onyx","language","onyx/language",-1594523950),new cljs.core.Keyword("onyx","params","onyx/params",716013253),new cljs.core.Keyword("onyx","medium","onyx/medium",-1885528026),new cljs.core.Keyword("onyx","plugin","onyx/plugin",-1694913021),new cljs.core.Keyword("onyx","pending-timeout","onyx/pending-timeout",646141687),new cljs.core.Keyword("onyx","input-retry-timeout","onyx/input-retry-timeout",-1814857877),new cljs.core.Keyword("onyx","max-pending","onyx/max-pending",2089404204),new cljs.core.Keyword("onyx","fn","onyx/fn",-1172046942),new cljs.core.Keyword("onyx","batch-fn?","onyx/batch-fn?",1414947429),new cljs.core.Keyword("onyx","group-by-key","onyx/group-by-key",1014495201),new cljs.core.Keyword("onyx","group-by-fn","onyx/group-by-fn",-260492431),new cljs.core.Keyword("onyx","flux-policy","onyx/flux-policy",-796588140),new cljs.core.Keyword("onyx","required-tags","onyx/required-tags",1663035792),new cljs.core.Keyword("onyx","uniqueness-key","onyx/uniqueness-key",480579909),new cljs.core.Keyword("onyx","deduplicate?","onyx/deduplicate?",-1041372443),new cljs.core.Keyword("onyx","bulk?","onyx/bulk?",516979180),new cljs.core.Keyword("onyx","restart-pred-fn","onyx/restart-pred-fn",1562954860)], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("onyx","tenancy-id","onyx/tenancy-id",-1387279421),new cljs.core.Keyword("zookeeper","server?","zookeeper/server?",186633569),new cljs.core.Keyword("zookeeper.server","port","zookeeper.server/port",-387270519),new cljs.core.Keyword("zookeeper","address","zookeeper/address",12632054),new cljs.core.Keyword("onyx.bookkeeper","server?","onyx.bookkeeper/server?",-1208955422),new cljs.core.Keyword("onyx.bookkeeper","delete-server-data?","onyx.bookkeeper/delete-server-data?",1188449527),new cljs.core.Keyword("onyx.bookkeeper","local-quorum?","onyx.bookkeeper/local-quorum?",-1573667304),new cljs.core.Keyword("onyx.bookkeeper","local-quorum-ports","onyx.bookkeeper/local-quorum-ports",892735892),new cljs.core.Keyword("onyx.bookkeeper","port","onyx.bookkeeper/port",-403389849),new cljs.core.Keyword("onyx.bookkeeper","base-journal-dir","onyx.bookkeeper/base-journal-dir",756994261),new cljs.core.Keyword("onyx.bookkeeper","base-ledger-dir","onyx.bookkeeper/base-ledger-dir",214730950),new cljs.core.Keyword("onyx.bookkeeper","disk-usage-threshold","onyx.bookkeeper/disk-usage-threshold",-776536512),new cljs.core.Keyword("onyx.bookkeeper","disk-usage-warn-threshold","onyx.bookkeeper/disk-usage-warn-threshold",-1724438769),new cljs.core.Keyword("onyx.bookkeeper","zk-ledgers-root-path","onyx.bookkeeper/zk-ledgers-root-path",1198616713),new cljs.core.Keyword("onyx","id","onyx/id",-1375545066)], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("trigger","window-id","trigger/window-id",-472875377),new cljs.core.Keyword("trigger","refinement","trigger/refinement",-1212299589),new cljs.core.Keyword("trigger","on","trigger/on",-836079968),new cljs.core.Keyword("trigger","sync","trigger/sync",500894838),new cljs.core.Keyword("trigger","emit","trigger/emit",-76016066),new cljs.core.Keyword("trigger","id","trigger/id",-326368132),new cljs.core.Keyword("trigger","period","trigger/period",710363569),new cljs.core.Keyword("trigger","threshold","trigger/threshold",1291289287),new cljs.core.Keyword("trigger","pred","trigger/pred",835767021),new cljs.core.Keyword("trigger","watermark-percentage","trigger/watermark-percentage",1245073398),new cljs.core.Keyword("trigger","fire-all-extents?","trigger/fire-all-extents?",-371445799),new cljs.core.Keyword("trigger","state-context","trigger/state-context",-1043486338),new cljs.core.Keyword("trigger","post-evictor","trigger/post-evictor",-1705934992),new cljs.core.Keyword("trigger","doc","trigger/doc",-1159844365)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("aggregation","init","aggregation/init",634160316),new cljs.core.Keyword("aggregation","init-locals","aggregation/init-locals",115643916),new cljs.core.Keyword("aggregation","create-state-update","aggregation/create-state-update",-1317662135),new cljs.core.Keyword("aggregation","apply-state-update","aggregation/apply-state-update",1828155530),new cljs.core.Keyword("aggregation","super-aggregation-fn","aggregation/super-aggregation-fn",-682936675)], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("window","id","window/id",-62222780),new cljs.core.Keyword("window","task","window/task",-720839305),new cljs.core.Keyword("window","type","window/type",-1895193220),new cljs.core.Keyword("window","aggregation","window/aggregation",842492712),new cljs.core.Keyword("window","window-key","window/window-key",-436709213),new cljs.core.Keyword("window","min-value","window/min-value",-363340643),new cljs.core.Keyword("window","session-key","window/session-key",986573062),new cljs.core.Keyword("window","range","window/range",818435118),new cljs.core.Keyword("window","slide","window/slide",929701092),new cljs.core.Keyword("window","storage-strategy","window/storage-strategy",-1037386492),new cljs.core.Keyword("window","init","window/init",-987606858),new cljs.core.Keyword("window","timeout-gap","window/timeout-gap",1031887595),new cljs.core.Keyword("window","doc","window/doc",-1961448405)], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("lifecycle","doc","lifecycle/doc",1610973345),new cljs.core.Keyword("lifecycle","start-task?","lifecycle/start-task?",1478637931),new cljs.core.Keyword("lifecycle","before-task-start","lifecycle/before-task-start",85347114),new cljs.core.Keyword("lifecycle","before-batch","lifecycle/before-batch",-1874470000),new cljs.core.Keyword("lifecycle","after-read-batch","lifecycle/after-read-batch",886096329),new cljs.core.Keyword("lifecycle","after-apply-fn","lifecycle/after-apply-fn",1798612181),new cljs.core.Keyword("lifecycle","after-batch","lifecycle/after-batch",-1396955646),new cljs.core.Keyword("lifecycle","after-task-stop","lifecycle/after-task-stop",1985614904),new cljs.core.Keyword("lifecycle","after-ack-segment","lifecycle/after-ack-segment",1535387759),new cljs.core.Keyword("lifecycle","after-retry-segment","lifecycle/after-retry-segment",1066246345),new cljs.core.Keyword("lifecycle","handle-exception","lifecycle/handle-exception",1160673407)], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"event-type","event-type",319722813),new cljs.core.Keyword(null,"task-event","task-event",1730573741),new cljs.core.Keyword(null,"segment","segment",-964921196),new cljs.core.Keyword(null,"grouped?","grouped?",531080948),new cljs.core.Keyword(null,"group-key","group-key",742570475),new cljs.core.Keyword(null,"lower-bound","lower-bound",153632489),new cljs.core.Keyword(null,"upper-bound","upper-bound",1562892816),new cljs.core.Keyword(null,"log-type","log-type",2069757168),new cljs.core.Keyword(null,"trigger-update","trigger-update",-2125461343),new cljs.core.Keyword(null,"aggregation-update","aggregation-update",-1473179925),new cljs.core.Keyword(null,"window","window",724519534),new cljs.core.Keyword(null,"next-state","next-state",-1428728252)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("trigger","init-state","trigger/init-state",1701233828),new cljs.core.Keyword("trigger","init-locals","trigger/init-locals",-1757731138),new cljs.core.Keyword("trigger","next-state","trigger/next-state",1843587884),new cljs.core.Keyword("trigger","trigger-fire?","trigger/trigger-fire?",1005631648)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("lifecycle","task","lifecycle/task",-1174935319),new cljs.core.Keyword("lifecycle","calls","lifecycle/calls",-199124898),new cljs.core.Keyword("lifecycle","doc","lifecycle/doc",1610973345)], null),cljs.core.PersistentVector.fromArray([new cljs.core.Keyword("onyx.core","task-map","onyx.core/task-map",1668186921),new cljs.core.Keyword("onyx.core","catalog","onyx.core/catalog",-654793619),new cljs.core.Keyword("onyx.core","workflow","onyx.core/workflow",477881410),new cljs.core.Keyword("onyx.core","flow-conditions","onyx.core/flow-conditions",328485226),new cljs.core.Keyword("onyx.core","windows","onyx.core/windows",-1130597258),new cljs.core.Keyword("onyx.core","triggers","onyx.core/triggers",1971263327),new cljs.core.Keyword("onyx.core","lifecycles","onyx.core/lifecycles",150880888),new cljs.core.Keyword("onyx.core","resume-point","onyx.core/resume-point",1617502612),new cljs.core.Keyword("onyx.core","fn","onyx.core/fn",2108604083),new cljs.core.Keyword("onyx.core","params","onyx.core/params",-299516516),new cljs.core.Keyword("onyx.core","metadata","onyx.core/metadata",672338062),new cljs.core.Keyword("onyx.core","results","onyx.core/results",-115224142),new cljs.core.Keyword("onyx.core","triggered","onyx.core/triggered",-1326462890),new cljs.core.Keyword("onyx.core","batch","onyx.core/batch",-1789886143),new cljs.core.Keyword("onyx.core","id","onyx.core/id",-528839707),new cljs.core.Keyword("onyx.core","job-id","onyx.core/job-id",-367579179),new cljs.core.Keyword("onyx.core","task","onyx.core/task",1756945878),new cljs.core.Keyword("onyx.core","task-id","onyx.core/task-id",2120719255),new cljs.core.Keyword("onyx.core","slot-id","onyx.core/slot-id",-1849532969),new cljs.core.Keyword("onyx.core","lifecycle-id","onyx.core/lifecycle-id",1823796111),new cljs.core.Keyword("onyx.core","scheduler-event","onyx.core/scheduler-event",1085307799),new cljs.core.Keyword("onyx.core","tenancy-id","onyx.core/tenancy-id",1640468148),new cljs.core.Keyword("onyx.core","peer-opts","onyx.core/peer-opts",213451637),new cljs.core.Keyword("onyx.core","replica-atom","onyx.core/replica-atom",-1632885941),new cljs.core.Keyword("onyx.core","task-information","onyx.core/task-information",1009362826),new cljs.core.Keyword("onyx.core","group-ch","onyx.core/group-ch",1471362927),new cljs.core.Keyword("onyx.core","outbox-ch","onyx.core/outbox-ch",-328327200),new cljs.core.Keyword("onyx.core","kill-flag","onyx.core/kill-flag",-1306429793),new cljs.core.Keyword("onyx.core","task-kill-flag","onyx.core/task-kill-flag",1049846053),new cljs.core.Keyword("onyx.core","log-prefix","onyx.core/log-prefix",-682870463),new cljs.core.Keyword("onyx.core","serialized-task","onyx.core/serialized-task",1699328574),new cljs.core.Keyword("onyx.core","log","onyx.core/log",-459178643),new cljs.core.Keyword("onyx.core","storage","onyx.core/storage",714051018),new cljs.core.Keyword("onyx.core","input-plugin","onyx.core/input-plugin",-1816018803),new cljs.core.Keyword("onyx.core","output-plugin","onyx.core/output-plugin",1141252675),new cljs.core.Keyword("onyx.core","monitoring","onyx.core/monitoring",-1412411087)], true),cljs.core.PersistentVector.fromArray([new cljs.core.Keyword("onyx","tenancy-id","onyx/tenancy-id",-1387279421),new cljs.core.Keyword("zookeeper","address","zookeeper/address",12632054),new cljs.core.Keyword("onyx.log","config","onyx.log/config",411056883),new cljs.core.Keyword("onyx.monitoring","config","onyx.monitoring/config",-1456705441),new cljs.core.Keyword("onyx.peer.metrics","lifecycles","onyx.peer.metrics/lifecycles",1062523280),new cljs.core.Keyword("onyx.peer","job-scheduler","onyx.peer/job-scheduler",-1294668840),new cljs.core.Keyword("onyx.peer","publisher-liveness-timeout-ms","onyx.peer/publisher-liveness-timeout-ms",536288099),new cljs.core.Keyword("onyx.peer","coordinator-max-sleep-ms","onyx.peer/coordinator-max-sleep-ms",-409574682),new cljs.core.Keyword("onyx.peer","subscriber-liveness-timeout-ms","onyx.peer/subscriber-liveness-timeout-ms",1428814185),new cljs.core.Keyword("onyx.peer","coordinator-barrier-period-ms","onyx.peer/coordinator-barrier-period-ms",374723382),new cljs.core.Keyword("onyx.peer","heartbeat-ms","onyx.peer/heartbeat-ms",70073471),new cljs.core.Keyword("onyx.peer","idle-min-sleep-ns","onyx.peer/idle-min-sleep-ns",-1970446105),new cljs.core.Keyword("onyx.peer","idle-max-sleep-ns","onyx.peer/idle-max-sleep-ns",846957425),new cljs.core.Keyword("onyx.peer","stop-task-timeout-ms","onyx.peer/stop-task-timeout-ms",536687168),new cljs.core.Keyword("onyx.peer","inbox-capacity","onyx.peer/inbox-capacity",1031762338),new cljs.core.Keyword("onyx.peer","outbox-capacity","onyx.peer/outbox-capacity",632105721),new cljs.core.Keyword("onyx.peer","storage","onyx.peer/storage",714035077),new cljs.core.Keyword("onyx.peer","storage.timeout","onyx.peer/storage.timeout",1638465475),new cljs.core.Keyword("onyx.peer","storage.s3.auth-type","onyx.peer/storage.s3.auth-type",-846374676),new cljs.core.Keyword("onyx.peer","storage.s3.auth.access-key","onyx.peer/storage.s3.auth.access-key",-809081249),new cljs.core.Keyword("onyx.peer","storage.s3.auth.secret-key","onyx.peer/storage.s3.auth.secret-key",556598566),new cljs.core.Keyword("onyx.peer","storage.s3.bucket","onyx.peer/storage.s3.bucket",688290718),new cljs.core.Keyword("onyx.peer","storage.s3.region","onyx.peer/storage.s3.region",1088539343),new cljs.core.Keyword("onyx.peer","storage.s3.endpoint","onyx.peer/storage.s3.endpoint",-1553286226),new cljs.core.Keyword("onyx.peer","storage.s3.accelerate?","onyx.peer/storage.s3.accelerate?",-1130241978),new cljs.core.Keyword("onyx.peer","storage.s3.encryption","onyx.peer/storage.s3.encryption",-883576492),new cljs.core.Keyword("onyx.peer","storage.s3.multipart-copy-part-size","onyx.peer/storage.s3.multipart-copy-part-size",-23406335),new cljs.core.Keyword("onyx.peer","storage.s3.multipart-copy-threshold","onyx.peer/storage.s3.multipart-copy-threshold",969880111),new cljs.core.Keyword("onyx.peer","retry-start-interval","onyx.peer/retry-start-interval",-1235138208),new cljs.core.Keyword("onyx.peer","join-failure-back-off","onyx.peer/join-failure-back-off",-1619886811),new cljs.core.Keyword("onyx.peer","drained-back-off","onyx.peer/drained-back-off",498278632),new cljs.core.Keyword("onyx.peer","peer-not-ready-back-off","onyx.peer/peer-not-ready-back-off",-35609505),new cljs.core.Keyword("onyx.peer","job-not-ready-back-off","onyx.peer/job-not-ready-back-off",348914406),new cljs.core.Keyword("onyx.peer","fn-params","onyx.peer/fn-params",-1543429359),new cljs.core.Keyword("onyx.windowing","min-value","onyx.windowing/min-value",189136591),new cljs.core.Keyword("onyx.peer","trigger-timer-resolution","onyx.peer/trigger-timer-resolution",678905557),new cljs.core.Keyword("onyx.peer","tags","onyx.peer/tags",-1529883273),new cljs.core.Keyword("onyx.peer","initial-sync-backoff-ms","onyx.peer/initial-sync-backoff-ms",-510014760),new cljs.core.Keyword("onyx.zookeeper","backoff-base-sleep-time-ms","onyx.zookeeper/backoff-base-sleep-time-ms",1258198647),new cljs.core.Keyword("onyx.zookeeper","backoff-max-sleep-time-ms","onyx.zookeeper/backoff-max-sleep-time-ms",131276947),new cljs.core.Keyword("onyx.zookeeper","backoff-max-retries","onyx.zookeeper/backoff-max-retries",1231536936),new cljs.core.Keyword("onyx.zookeeper","prepare-failure-detection-interval","onyx.zookeeper/prepare-failure-detection-interval",-621428399),new cljs.core.Keyword("onyx.query","server?","onyx.query/server?",-2030005219),new cljs.core.Keyword("onyx.query.server","ip","onyx.query.server/ip",-1162256274),new cljs.core.Keyword("onyx.query.server","port","onyx.query.server/port",1941450325),new cljs.core.Keyword("onyx.messaging","decompress-fn","onyx.messaging/decompress-fn",-1849717833),new cljs.core.Keyword("onyx.messaging","compress-fn","onyx.messaging/compress-fn",-751146010),new cljs.core.Keyword("onyx.messaging","impl","onyx.messaging/impl",419530192),new cljs.core.Keyword("onyx.messaging","bind-addr","onyx.messaging/bind-addr",2090466014),new cljs.core.Keyword("onyx.messaging","external-addr","onyx.messaging/external-addr",-1613358609),new cljs.core.Keyword("onyx.messaging","peer-port","onyx.messaging/peer-port",-708594476),new cljs.core.Keyword("onyx.messaging.aeron","embedded-driver?","onyx.messaging.aeron/embedded-driver?",446016537),new cljs.core.Keyword("onyx.messaging.aeron","embedded-media-driver-threading","onyx.messaging.aeron/embedded-media-driver-threading",559619034),new cljs.core.Keyword("onyx.messaging","allow-short-circuit?","onyx.messaging/allow-short-circuit?",-1704052220),new cljs.core.Keyword("onyx.messaging","short-circuit-buffer-size","onyx.messaging/short-circuit-buffer-size",1027918582),new cljs.core.Keyword("onyx.messaging.aeron","subscriber-count","onyx.messaging.aeron/subscriber-count",-1978303730),new cljs.core.Keyword("onyx.messaging.aeron","write-buffer-size","onyx.messaging.aeron/write-buffer-size",359494462),new cljs.core.Keyword("onyx.messaging.aeron","poll-idle-strategy","onyx.messaging.aeron/poll-idle-strategy",1139046072),new cljs.core.Keyword("onyx.messaging.aeron","offer-idle-strategy","onyx.messaging.aeron/offer-idle-strategy",738857254),new cljs.core.Keyword("onyx.messaging.aeron","publication-creation-timeout","onyx.messaging.aeron/publication-creation-timeout",-1284510771),new cljs.core.Keyword("onyx.peer","state-log-impl","onyx.peer/state-log-impl",-1652439167),new cljs.core.Keyword("onyx.bookkeeper","read-batch-size","onyx.bookkeeper/read-batch-size",1096282433),new cljs.core.Keyword("onyx.bookkeeper","write-batch-size","onyx.bookkeeper/write-batch-size",-863587991),new cljs.core.Keyword("onyx.bookkeeper","write-batch-backoff","onyx.bookkeeper/write-batch-backoff",-1541666263),new cljs.core.Keyword("onyx.bookkeeper","ledger-ensemble-size","onyx.bookkeeper/ledger-ensemble-size",1236159896),new cljs.core.Keyword("onyx.bookkeeper","ledger-quorum-size","onyx.bookkeeper/ledger-quorum-size",-596523215),new cljs.core.Keyword("onyx.bookkeeper","ledger-id-written-back-off","onyx.bookkeeper/ledger-id-written-back-off",-855185726),new cljs.core.Keyword("onyx.bookkeeper","ledger-password","onyx.bookkeeper/ledger-password",703648578),new cljs.core.Keyword("onyx.bookkeeper","client-throttle","onyx.bookkeeper/client-throttle",-606948316),new cljs.core.Keyword("onyx.bookkeeper","write-buffer-size","onyx.bookkeeper/write-buffer-size",313906438),new cljs.core.Keyword("onyx.bookkeeper","client-timeout","onyx.bookkeeper/client-timeout",-1255720024),new cljs.core.Keyword("onyx.peer","state-filter-impl","onyx.peer/state-filter-impl",599541228),new cljs.core.Keyword("onyx.rocksdb.filter","base-dir","onyx.rocksdb.filter/base-dir",-1174849671),new cljs.core.Keyword("onyx.rocksdb.filter","bloom-filter-bits","onyx.rocksdb.filter/bloom-filter-bits",524655407),new cljs.core.Keyword("onyx.rocksdb.filter","compression","onyx.rocksdb.filter/compression",1708824983),new cljs.core.Keyword("onyx.rocksdb.filter","block-size","onyx.rocksdb.filter/block-size",2085005526),new cljs.core.Keyword("onyx.rocksdb.filter","peer-block-cache-size","onyx.rocksdb.filter/peer-block-cache-size",-257999711),new cljs.core.Keyword("onyx.rocksdb.filter","num-buckets","onyx.rocksdb.filter/num-buckets",-994960795),new cljs.core.Keyword("onyx.rocksdb.filter","num-ids-per-bucket","onyx.rocksdb.filter/num-ids-per-bucket",1702890512),new cljs.core.Keyword("onyx.rocksdb.filter","rotation-check-interval-ms","onyx.rocksdb.filter/rotation-check-interval-ms",-1345878505),new cljs.core.Keyword("onyx.task-scheduler.colocated","only-send-local?","onyx.task-scheduler.colocated/only-send-local?",-49365949),new cljs.core.Keyword("onyx","id","onyx/id",-1375545066)], true),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("refinement","create-state-update","refinement/create-state-update",-1610669832),new cljs.core.Keyword("refinement","apply-state-update","refinement/apply-state-update",-1044493007)], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"workflow","workflow",-640694607),new cljs.core.Keyword(null,"catalog","catalog",-439057154),new cljs.core.Keyword(null,"flow-conditions","flow-conditions",-833083495),new cljs.core.Keyword(null,"windows","windows",2068861701),new cljs.core.Keyword(null,"triggers","triggers",-1443678770),new cljs.core.Keyword(null,"metadata","metadata",1799301597),new cljs.core.Keyword(null,"lifecycles","lifecycles",-839774043),new cljs.core.Keyword(null,"resume-point","resume-point",1043151683),new cljs.core.Keyword(null,"task-scheduler","task-scheduler",-1395479890),new cljs.core.Keyword(null,"percentage","percentage",-1610213650),new cljs.core.Keyword("acker","exempt-tasks","acker/exempt-tasks",-1903074645),new cljs.core.Keyword("acker","exempt-input-tasks?","acker/exempt-input-tasks?",261248271),new cljs.core.Keyword("acker","percentage","acker/percentage",-1182757384),new cljs.core.Keyword("acker","exempt-output-tasks?","acker/exempt-output-tasks?",-1049872165)], null)]);

//# sourceMappingURL=information_model.js.map