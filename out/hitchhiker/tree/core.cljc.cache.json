["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$catvec","~$clojure.core.rrb-vector","~$<?resolve","~$hitchhiker.tree.core","~$<?","^:","~$subvec","^8","~$go-try","^:"],"~:excludes",["~#set",["^<","~$resolve","~$compare"]],"~:name","^:","~:imports",null,"~:requires",["^ ","^8","^8","~$async","~$cljs.core.async","^F","^F","~$goog.array","^G"],"~:uses",["^ ","~$<!","^F","~$chan","^F","~$promise-chan","^F","^7","^8","^<","^8","~$put!","^F"],"~:defs",["^ ","~$forward-iterator",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","~:line",588,"~:column",11,"~:end-line",588,"~:end-column",27,"~:arglists",["~#list",["~$quote",["^W",[["~$iter-ch","~$path","~$start-key"]]]]],"~:doc","Takes the result of a search and puts the iterated elements onto iter-ch\n  going forward over the tree as needed. Does lg(n) backtracking sometimes."],"^B","~$hitchhiker.tree.core/forward-iterator","~:variadic",false,"^Q","out/hitchhiker/tree/core.cljc","^U",27,"~:method-params",["^W",[["^Y","^Z","^["]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^S",5,"^R",588,"^T",588,"~:max-fixed-arity",3,"~:fn-var",true,"^V",["^W",["^X",["^W",[["^Y","^Z","^["]]]]],"^10","Takes the result of a search and puts the iterated elements onto iter-ch\n  going forward over the tree as needed. Does lg(n) backtracking sometimes."],"~$nth-of-set",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",360,"^S",7,"^T",360,"^U",17,"^V",["^W",["^X",["^W",[["~$set","~$index"]]]]],"^10","Like nth, but for sorted sets. O(n)"],"^B","~$hitchhiker.tree.core/nth-of-set","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^13",["^W",[["^19","^1:"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",360,"^T",360,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^19","^1:"]]]]],"^10","Like nth, but for sorted sets. O(n)"],"~$underflow?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",136,"^S",4,"^T",136,"^U",14,"~:protocol","~$hitchhiker.tree.core/INode","^10","Returns true if this node has too few elements","^V",["^W",["^X",["^W",[["~$node"]]]]]],"^1=","^1>","^B","~$hitchhiker.tree.core/underflow?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",14,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",134,"^T",136,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]],"^10","Returns true if this node has too few elements"],"~$throw-if-exception",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",39,"^S",7,"^T",39,"^U",25,"^V",["^W",["^X",["^W",[["~$x"]]]]],"^10","Helper method that checks if x is Exception and if yes, wraps it in a new\n  exception, passing though ex-data if any, and throws it. The wrapping is done\n  to maintain a full stack trace when jumping between multiple contexts."],"^B","~$hitchhiker.tree.core/throw-if-exception","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",25,"^13",["^W",[["~$x"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",39,"^T",39,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["~$x"]]]]],"^10","Helper method that checks if x is Exception and if yes, wraps it in a new\n  exception, passing though ex-data if any, and throws it. The wrapping is done\n  to maintain a full stack trace when jumping between multiple contexts."],"~$DataNode",["^ ","~:num-fields",3,"~:protocols",["^?",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","^1>","~$hitchhiker.tree.core/IResolve","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^B","~$hitchhiker.tree.core/DataNode","^Q","out/hitchhiker/tree/core.cljc","^U",20,"~:type",true,"^S",12,"~:internal-ctor",true,"^R",365,"~:record",true,"^T",365,"~:skip-protocol-flag",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$b-tree",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",701,"^S",7,"^T",701,"^U",13,"^V",["^W",["^X",["^W",[["~$cfg","~$&","~$kvs"]]]]],"~:top-fn",["^ ","^12",true,"^16",1,"^13",[["^W",["^1[","^20"]]],"^V",["^W",[["^1[","~$&","^20"]]],"^15",["^W",[null]]]],"^B","~$hitchhiker.tree.core/b-tree","^12",true,"^Q","out/hitchhiker/tree/core.cljc","^U",13,"^21",["^ ","^12",true,"^16",1,"^13",[["^W",["^1[","^20"]]],"^V",["^W",[["^1[","~$&","^20"]]],"^15",["^W",[null]]],"^13",[["^W",["^1[","^20"]]],"^14",null,"^15",["^W",[null]],"^S",1,"^R",701,"^T",701,"^16",1,"^17",true,"^V",["^W",[["^1[","~$&","^20"]]]],"~$cljs-env?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",24,"^S",8,"^T",24,"^U",17,"~:private",true,"^V",["^W",["^X",["^W",[["~$env"]]]]],"^10","Take the &env from a macro, and tell whether we are expanding into cljs."],"^24",true,"^B","~$hitchhiker.tree.core/cljs-env?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^13",["^W",[["^25"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",24,"^T",24,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^25"]]]]],"^10","Take the &env from a macro, and tell whether we are expanding into cljs."],"~$data-node",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",395,"^S",7,"^T",395,"^U",16,"^V",["^W",["^X",["^W",[["^1[","~$children"]]]]],"^10","Creates a new data node"],"^B","~$hitchhiker.tree.core/data-node","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",16,"^13",["^W",[["^1[","^28"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",395,"^T",395,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^1[","^28"]]]]],"^10","Creates a new data node"],"~$data-node?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",400,"^S",7,"^T",400,"^U",17,"^V",["^W",["^X",["^W",[["^1?"]]]]]],"^B","~$hitchhiker.tree.core/data-node?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",400,"^T",400,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]]],"~$->TestingBackend",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",770,"^S",12,"^T",770,"^U",26,"^1W",true,"~:factory","~:positional","^V",["^W",["^X",["^W",[[]]]]]],"^B","~$hitchhiker.tree.core/->TestingBackend","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",26,"^13",["^W",[[]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2>","^R",770,"^T",770,"^16",0,"^17",true,"^V",["^W",["^X",["^W",[[]]]]]],"~$index?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",122,"^S",4,"^T",122,"^U",10,"^1=","^1K","^10","Returns true if this is an index node","^V",["^W",["^X",["^W",[["~$_"]]]]]],"^1=","^1K","^B","~$hitchhiker.tree.core/index?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",10,"^13",["^W",[["~$_"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",119,"^T",122,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["~$_"]]]]],"^10","Returns true if this is an index node"],"~$*async-backend*",["^ ","^B","~$hitchhiker.tree.core/*async-backend*","^Q","out/hitchhiker/tree/core.cljc","^R",19,"^S",1,"^T",19,"^U",31,"~:dynamic",true,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",19,"^S",16,"^T",19,"^U",31,"^2D",true],"~:tag","~$cljs.core/Keyword"],"~$->Config",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",114,"^S",12,"^T",114,"^U",18,"^1W",true,"^2=","^2>","^V",["^W",["^X",["^W",[["~$index-b","~$data-b","~$op-buf-size"]]]]]],"^B","~$hitchhiker.tree.core/->Config","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",18,"^13",["^W",[["^2H","^2I","^2J"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2>","^R",114,"^T",114,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^2H","^2I","^2J"]]]]]],"~$Split",["^ ","^1D",3,"^1E",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^B","~$hitchhiker.tree.core/Split","^Q","out/hitchhiker/tree/core.cljc","^U",17,"^1V",true,"^S",12,"^1W",true,"^R",141,"^1X",true,"^T",141,"^1Y",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$write-node",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",766,"^S",4,"^T",766,"^U",14,"^1=","~$hitchhiker.tree.core/IBackend","^10","Writes the given node to storage, returning a go-block with its assigned address","^V",["^W",["^X",["^W",[["~$backend","^1?","~$session"]]]]]],"^1=","^2O","^B","~$hitchhiker.tree.core/write-node","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",14,"^13",["^W",[["^2P","^1?","^2Q"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",764,"^T",766,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^2P","^1?","^2Q"]]]]],"^10","Writes the given node to storage, returning a go-block with its assigned address"],"~$map->IndexNode",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",246,"^S",12,"^T",246,"^U",21,"^1W",true,"^2=","~:map","^V",["^W",["^X",["^W",[["~$G__42145"]]]]]],"^B","~$hitchhiker.tree.core/map->IndexNode","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",21,"^13",["^W",[["^2U"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2T","^R",246,"^T",246,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^2U"]]]]]],"~$map->Config",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",114,"^S",12,"^T",114,"^U",18,"^1W",true,"^2=","^2T","^V",["^W",["^X",["^W",[["~$G__42126"]]]]]],"^B","~$hitchhiker.tree.core/map->Config","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",18,"^13",["^W",[["^2X"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2T","^R",114,"^T",114,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^2X"]]]]]],"~$insert",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",616,"^S",7,"^T",616,"^U",13,"^V",["^W",["^X",["^W",[[["^ ","~:keys",["^1["],"~:as","~$tree"],"~$key","~$value"]]]]]],"^B","~$hitchhiker.tree.core/insert","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",13,"^13",["^W",[["~$p__42175","^32","^33"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",616,"^T",616,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[[["^ ","^2[",["^1["],"^30","^31"],"^32","^33"]]]]]],"~$Config",["^ ","^1D",3,"^1E",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^B","~$hitchhiker.tree.core/Config","^Q","out/hitchhiker/tree/core.cljc","^U",18,"^1V",true,"^S",12,"^1W",true,"^R",114,"^1X",true,"^T",114,"^1Y",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$IndexNode",["^ ","^1D",4,"^1E",["^?",["^1F","^1G","^1H","^1I","^1J","^1>","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^B","~$hitchhiker.tree.core/IndexNode","^Q","out/hitchhiker/tree/core.cljc","^U",21,"^1V",true,"^S",12,"^1W",true,"^R",246,"^1X",true,"^T",246,"^1Y",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$lookup",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",139,"^S",4,"^T",139,"^U",10,"^1=","^1>","^10","Returns the child node which contains the given key","^V",["^W",["^X",["^W",[["^1?","^32"]]]]]],"^1=","^1>","^B","~$hitchhiker.tree.core/lookup","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",10,"^13",["^W",[["^1?","^32"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",134,"^T",139,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^1?","^32"]]]]],"^10","Returns the child node which contains the given key"],"~$TestingBackend",["^ ","^1D",0,"^1E",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^2O","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^B","~$hitchhiker.tree.core/TestingBackend","^Q","out/hitchhiker/tree/core.cljc","^U",26,"^1V",true,"^S",12,"^1W",true,"^R",770,"^1X",true,"^T",770,"^1Y",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$map->TestingBackend",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",770,"^S",12,"^T",770,"^U",26,"^1W",true,"^2=","^2T","^V",["^W",["^X",["^W",[["~$G__42200"]]]]]],"^B","~$hitchhiker.tree.core/map->TestingBackend","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",26,"^13",["^W",[["^3?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2T","^R",770,"^T",770,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^3?"]]]]]],"~$lookup-fwd-iter",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",574,"^S",11,"^T",574,"^U",26,"^V",["^W",["^X",["^W",[["^31","^32"]]]]]],"^B","~$hitchhiker.tree.core/lookup-fwd-iter","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",26,"^13",["^W",[["^31","^32"]]],"^14",null,"^15",["^W",[null,null]],"^S",5,"^R",574,"^T",574,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^31","^32"]]]]]],"~$INode",["^ ","^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",134,"^S",14,"^T",134,"^U",19,"^10",null,"~:protocol-symbol",true,"~:jsdoc",["^W",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$overflow?",[["^1?"]],"^1<",[["^1?"]],"~$merge-node",[["^1?","~$other"]],"~$split-node",[["^1?"]],"^3:",[["^1?","^32"]]]]],"^3D",true,"^B","^1>","^Q","out/hitchhiker/tree/core.cljc","^U",19,"^S",1,"^R",134,"^3F",["^ ","^3G",["^ ","^3H",[["^1?"]],"^1<",[["^1?"]],"^3I",[["^1?","^3J"]],"^3K",[["^1?"]],"^3:",[["^1?","^32"]]]],"~:info",null,"^T",134,"^2E","~$any","~:impls",["^?",["^1U","^39"]],"^10",null,"^3E",["^W",["@interface"]]],"~$dirty?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",124,"^S",4,"^T",124,"^U",10,"^1=","^1K","^10","Returns true if this should be flushed","^V",["^W",["^X",["^W",[["~$_"]]]]]],"^1=","^1K","^B","~$hitchhiker.tree.core/dirty?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",10,"^13",["^W",[["~$_"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",119,"^T",124,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["~$_"]]]]],"^10","Returns true if this should be flushed"],"~$map->Split",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",141,"^S",12,"^T",141,"^U",17,"^1W",true,"^2=","^2T","^V",["^W",["^X",["^W",[["~$G__42136"]]]]]],"^B","~$hitchhiker.tree.core/map->Split","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^13",["^W",[["^3R"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2T","^R",141,"^T",141,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^3R"]]]]]],"~$IResolve",["^ ","^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",119,"^S",14,"^T",119,"^U",22,"^10","All nodes must implement this protocol. It's includes the minimal functionality\n   necessary to avoid resolving nodes unless strictly necessary.","^3D",true,"^3E",["^W",["@interface"]],"^3F",["^ ","^3G",["^ ","^2@",[["~$_"]],"~$last-key",[["~$_"]],"^3O",[["~$_"]],"^@",[["~$_"]]]]],"^3D",true,"^B","^1K","^Q","out/hitchhiker/tree/core.cljc","^U",22,"^S",1,"^R",119,"^3F",["^ ","^3G",["^ ","^2@",[["~$_"]],"^3U",[["~$_"]],"^3O",[["~$_"]],"^@",[["~$_"]]]],"^3L",null,"^T",119,"^2E","^3M","^3N",["^?",["^1U","^39","~$hitchhiker.tree.core/TestingAddr"]],"^10","All nodes must implement this protocol. It's includes the minimal functionality\n   necessary to avoid resolving nodes unless strictly necessary.","^3E",["^W",["@interface"]]],"~$IKeyCompare",["^ ","^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",116,"^S",14,"^T",116,"^U",25,"^10",null,"^3D",true,"^3E",["^W",["@interface"]],"^3F",["^ ","^3G",["^ ","^A",[["~$key1","~$key2"]]]]],"^3D",true,"^B","~$hitchhiker.tree.core/IKeyCompare","^Q","out/hitchhiker/tree/core.cljc","^U",25,"^S",1,"^R",116,"^3F",["^ ","^3G",["^ ","^A",[["^3X","^3Y"]]]],"^3L",null,"^T",116,"^2E","^3M","^3N",["^?",["~$object","~$number"]],"^10",null,"^3E",["^W",["@interface"]]],"~$backtrack-up-path-until",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",454,"^S",7,"^T",454,"^U",30,"^V",["^W",["^X",["^W",[["^Z","~$pred"]]]]],"^10","Given a path (starting with root and ending with an index), searches backwards,\n   passing each pair of parent & index we just came from to the predicate function.\n   When that function returns true, we return the path ending in the index for which\n   it was true, or else we return the empty path"],"^B","~$hitchhiker.tree.core/backtrack-up-path-until","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",30,"^13",["^W",[["^Z","^42"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",454,"^T",454,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^Z","^42"]]]]],"^10","Given a path (starting with root and ending with an index), searches backwards,\n   passing each pair of parent & index we just came from to the predicate function.\n   When that function returns true, we return the path ending in the index for which\n   it was true, or else we return the empty path"],"~$map->DataNode",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",365,"^S",12,"^T",365,"^U",20,"^1W",true,"^2=","^2T","^V",["^W",["^X",["^W",[["~$G__42157"]]]]]],"^B","~$hitchhiker.tree.core/map->DataNode","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",20,"^13",["^W",[["^45"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2T","^R",365,"^T",365,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^45"]]]]]],"~$lookup-key",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",541,"^S",7,"^T",541,"^U",17,"^V",["^W",["^X",["^W",[["^31","^32"],["^31","^32","~$not-found"]]]]],"^10","Given a B-tree and a key, gets an iterator into the tree","^21",["^ ","^12",false,"^16",3,"^13",["^W",[["^31","^32"],["^31","^32","^48"]]],"^V",["^W",[["^31","^32"],["^31","^32","^48"]]],"^15",["^W",[null,null]]]],"^B","~$hitchhiker.tree.core/lookup-key","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^21",["^ ","^12",false,"^16",3,"^13",["^W",[["^31","^32"],["^31","^32","^48"]]],"^V",["^W",[["^31","^32"],["^31","^32","^48"]]],"^15",["^W",[null,null]]],"^13",["^W",[["^31","^32"],["^31","^32","^48"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",541,"^T",541,"^16",3,"^17",true,"^V",["^W",[["^31","^32"],["^31","^32","^48"]]],"^10","Given a B-tree and a key, gets an iterator into the tree"],"~$->IndexNode",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",246,"^S",12,"^T",246,"^U",21,"^1W",true,"^2=","^2>","^V",["^W",["^X",["^W",[["^28","~$storage-addr","~$op-buf","^1["]]]]]],"^B","~$hitchhiker.tree.core/->IndexNode","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",21,"^13",["^W",[["^28","^4;","^4<","^1["]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2>","^R",246,"^T",246,"^16",4,"^17",true,"^V",["^W",["^X",["^W",[["^28","^4;","^4<","^1["]]]]]],"^3I",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",137,"^S",4,"^T",137,"^U",14,"^1=","^1>","^10","Combines this node with the other to form a bigger node. We assume they're siblings","^V",["^W",["^X",["^W",[["^1?","^3J"]]]]]],"^1=","^1>","^B","~$hitchhiker.tree.core/merge-node","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",14,"^13",["^W",[["^1?","^3J"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",134,"^T",137,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^1?","^3J"]]]]],"^10","Combines this node with the other to form a bigger node. We assume they're siblings"],"~$delete",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",650,"^S",7,"^T",650,"^U",13,"^V",["^W",["^X",["^W",[[["^ ","^2[",["^1["],"^30","^31"],"^32"]]]]]],"^B","~$hitchhiker.tree.core/delete","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",13,"^13",["^W",[["~$p__42180","^32"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",650,"^T",650,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[[["^ ","^2[",["^1["],"^30","^31"],"^32"]]]]]],"~$IBackend",["^ ","^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",764,"^S",14,"^T",764,"^U",22,"^10",null,"^3D",true,"^3E",["^W",["@interface"]],"^3F",["^ ","^3G",["^ ","~$new-session",[["^2P"]],"^2N",[["^2P","^1?","^2Q"]],"~$anchor-root",[["^2P","^1?"]],"~$delete-addr",[["^2P","~$addr","^2Q"]]]]],"^3D",true,"^B","^2O","^Q","out/hitchhiker/tree/core.cljc","^U",22,"^S",1,"^R",764,"^3F",["^ ","^3G",["^ ","^4C",[["^2P"]],"^2N",[["^2P","^1?","^2Q"]],"^4D",[["^2P","^1?"]],"^4E",[["^2P","^4F","^2Q"]]]],"^3L",null,"^T",764,"^2E","^3M","^3N",["^?",["^3="]],"^10",null,"^3E",["^W",["@interface"]]],"~$map->TestingAddr",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",714,"^S",12,"^T",714,"^U",23,"^1W",true,"^2=","^2T","^V",["^W",["^X",["^W",[["~$G__42192"]]]]]],"^B","~$hitchhiker.tree.core/map->TestingAddr","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",23,"^13",["^W",[["^4H"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2T","^R",714,"^T",714,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^4H"]]]]]],"~$order-on-edn-types",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",186,"^S",7,"^T",186,"^U",25,"^V",["^W",["^X",["^W",[["~$t"]]]]]],"^B","~$hitchhiker.tree.core/order-on-edn-types","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",25,"^13",["^W",[["~$t"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",186,"^T",186,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["~$t"]]]]]],"^4E",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",768,"^S",4,"^T",768,"^U",15,"^1=","^2O","^10","Deletes the given addr from storage","^V",["^W",["^X",["^W",[["^2P","^4F","^2Q"]]]]]],"^1=","^2O","^B","~$hitchhiker.tree.core/delete-addr","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",15,"^13",["^W",[["^2P","^4F","^2Q"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",764,"^T",768,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^2P","^4F","^2Q"]]]]],"^10","Deletes the given addr from storage"],"^3K",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",138,"^S",4,"^T",138,"^U",14,"^1=","^1>","^10","Returns a Split object with the 2 nodes that we turned this into","^V",["^W",["^X",["^W",[["^1?"]]]]]],"^1=","^1>","^B","~$hitchhiker.tree.core/split-node","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",14,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",134,"^T",138,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]],"^10","Returns a Split object with the 2 nodes that we turned this into"],"^3H",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",135,"^S",4,"^T",135,"^U",13,"^1=","^1>","^10","Returns true if this node has too many elements","^V",["^W",["^X",["^W",[["^1?"]]]]]],"^1=","^1>","^B","~$hitchhiker.tree.core/overflow?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",13,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",134,"^T",135,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]],"^10","Returns true if this node has too many elements"],"~$TestingAddr",["^ ","^1D",2,"^1E",["^?",["^1F","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^B","^3V","^Q","out/hitchhiker/tree/core.cljc","^U",23,"^1V",true,"^S",12,"^1W",true,"^R",714,"^1X",true,"^T",714,"^1Y",["^?",["^1F","^1G","^1H","^1I","^1J","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$tree-node?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",130,"^S",7,"^T",130,"^U",17,"^V",["^W",["^X",["^W",[["^1?"]]]]]],"^B","~$hitchhiker.tree.core/tree-node?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",130,"^T",130,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]]],"~$->TestingAddr",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",714,"^S",12,"^T",714,"^U",23,"^1W",true,"^2=","^2>","^V",["^W",["^X",["^W",[["^3U","^1?"]]]]]],"^B","~$hitchhiker.tree.core/->TestingAddr","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",23,"^13",["^W",[["^3U","^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2>","^R",714,"^T",714,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^3U","^1?"]]]]]],"~$lookup-path",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",520,"^S",7,"^T",520,"^U",18,"^V",["^W",["^X",["^W",[["^31","^32"]]]]],"^10","Given a B-tree and a key, gets a path into the tree"],"^B","~$hitchhiker.tree.core/lookup-path","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",18,"^13",["^W",[["^31","^32"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",520,"^T",520,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^31","^32"]]]]],"^10","Given a B-tree and a key, gets a path into the tree"],"~$right-successor",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",471,"^S",7,"^T",471,"^U",22,"^V",["^W",["^X",["^W",[["^Z"]]]]],"^10","Given a node on a path, find's that node's right successor node"],"^B","~$hitchhiker.tree.core/right-successor","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",22,"^13",["^W",[["^Z"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",471,"^T",471,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^Z"]]]]],"^10","Given a node on a path, find's that node's right successor node"],"^4C",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",765,"^S",4,"^T",765,"^U",15,"^1=","^2O","^10","Returns a session object that will collect stats","^V",["^W",["^X",["^W",[["^2P"]]]]]],"^1=","^2O","^B","~$hitchhiker.tree.core/new-session","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",15,"^13",["^W",[["^2P"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",764,"^T",765,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^2P"]]]]],"^10","Returns a session object that will collect stats"],"~$->DataNode",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",365,"^S",12,"^T",365,"^U",20,"^1W",true,"^2=","^2>","^V",["^W",["^X",["^W",[["^28","^4;","^1["]]]]]],"^B","~$hitchhiker.tree.core/->DataNode","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",20,"^13",["^W",[["^28","^4;","^1["]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2>","^R",365,"^T",365,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^28","^4;","^1["]]]]]],"~$flush-children",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",755,"^S",7,"^T",755,"^U",21,"^V",["^W",["^X",["^W",[["^28","^2P","^2Q"]]]]]],"^B","~$hitchhiker.tree.core/flush-children","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",21,"^13",["^W",[["^28","^2P","^2Q"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",755,"^T",755,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^28","^2P","^2Q"]]]]]],"~$dirty!",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",746,"^S",7,"^T",746,"^U",13,"^V",["^W",["^X",["^W",[["^1?"]]]]],"^10","Marks a node as being dirty if it was clean"],"^B","~$hitchhiker.tree.core/dirty!","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",13,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",746,"^T",746,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]],"^10","Marks a node as being dirty if it was clean"],"~$reduce<",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",100,"^S",7,"^T",100,"^U",14,"^V",["^W",["^X",["^W",[["~$go-f","~$init","~$s"]]]]],"^10","Reduces over a sequence s with a go function go-f given the initial value\n  init."],"^B","~$hitchhiker.tree.core/reduce<","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",14,"^13",["^W",[["^54","^55","~$s"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",100,"^T",100,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^54","^55","~$s"]]]]],"^10","Reduces over a sequence s with a go function go-f given the initial value\n  init."],"~$index-node?",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",308,"^S",7,"^T",308,"^U",18,"^V",["^W",["^X",["^W",[["^1?"]]]]]],"^B","~$hitchhiker.tree.core/index-node?","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",18,"^13",["^W",[["^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",308,"^T",308,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^1?"]]]]]],"^3U",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",123,"^S",4,"^T",123,"^U",12,"^1=","^1K","^10","Returns the rightmost key of the node","^V",["^W",["^X",["^W",[["~$_"]]]]]],"^1=","^1K","^B","~$hitchhiker.tree.core/last-key","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",12,"^13",["^W",[["~$_"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",119,"^T",123,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["~$_"]]]]],"^10","Returns the rightmost key of the node"],"^@",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",126,"^S",4,"^T",126,"^U",11,"^1=","^1K","^10","Returns the INode version of this node in a go-block; could trigger IO","^V",["^W",["^X",["^W",[["~$_"]]]]]],"^1=","^1K","^B","~$hitchhiker.tree.core/resolve","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",11,"^13",["^W",[["~$_"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",119,"^T",126,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["~$_"]]]]],"^10","Returns the INode version of this node in a go-block; could trigger IO"],"^A",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",117,"^S",4,"^T",117,"^U",11,"^1=","^3Z","^10",null,"^V",["^W",["^X",["^W",[["^3X","^3Y"]]]]]],"^1=","^3Z","^B","~$hitchhiker.tree.core/compare","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",11,"^13",["^W",[["^3X","^3Y"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",116,"^T",117,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^3X","^3Y"]]]]],"^10",null],"~$->Split",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",141,"^S",12,"^T",141,"^U",17,"^1W",true,"^2=","^2>","^V",["^W",["^X",["^W",[["~$left","~$right","~$median"]]]]]],"^B","~$hitchhiker.tree.core/->Split","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^13",["^W",[["^5=","^5>","^5?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^1W",true,"^2=","^2>","^R",141,"^T",141,"^16",3,"^17",true,"^V",["^W",["^X",["^W",[["^5=","^5>","^5?"]]]]]],"~$flush-tree",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",780,"^S",7,"^T",780,"^U",17,"^V",["^W",["^X",["^W",[["^31","^2P"],["^31","^2P","~$stats"]]]]],"^10","Given the tree, finds all dirty nodes, delivering addrs into them.\n   Every dirty node also gets replaced with its TestingAddr.\n   These form a GC cycle, have fun with the unmanaged memory port :)","^21",["^ ","^12",false,"^16",3,"^13",["^W",[["^31","^2P"],["^31","^2P","^5B"]]],"^V",["^W",[["^31","^2P"],["^31","^2P","^5B"]]],"^15",["^W",[null,null]]]],"^B","~$hitchhiker.tree.core/flush-tree","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",17,"^21",["^ ","^12",false,"^16",3,"^13",["^W",[["^31","^2P"],["^31","^2P","^5B"]]],"^V",["^W",[["^31","^2P"],["^31","^2P","^5B"]]],"^15",["^W",[null,null]]],"^13",["^W",[["^31","^2P"],["^31","^2P","^5B"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",780,"^T",780,"^16",3,"^17",true,"^V",["^W",[["^31","^2P"],["^31","^2P","^5B"]]],"^10","Given the tree, finds all dirty nodes, delivering addrs into them.\n   Every dirty node also gets replaced with its TestingAddr.\n   These form a GC cycle, have fun with the unmanaged memory port :)"],"~$index-node-keys",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",239,"^S",7,"^T",239,"^U",22,"^V",["^W",["^X",["^W",[["^28"]]]]],"^10","Calculates the separating keys given the children of an index node"],"^B","~$hitchhiker.tree.core/index-node-keys","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",22,"^13",["^W",[["^28"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",239,"^T",239,"^16",1,"^17",true,"^V",["^W",["^X",["^W",[["^28"]]]]],"^10","Calculates the separating keys given the children of an index node"],"^4D",["^ ","^O",null,"^P",["^ ","^Q","/home/bamarco/dev/datsync/out/hitchhiker/tree/core.cljc","^R",767,"^S",4,"^T",767,"^U",15,"^1=","^2O","^10","Tells the backend this is a temporary root","^V",["^W",["^X",["^W",[["^2P","^1?"]]]]]],"^1=","^2O","^B","~$hitchhiker.tree.core/anchor-root","^12",false,"^Q","out/hitchhiker/tree/core.cljc","^U",15,"^13",["^W",[["^2P","^1?"]]],"^14",null,"^15",["^W",[null,null]],"^S",1,"^R",764,"^T",767,"^16",2,"^17",true,"^V",["^W",["^X",["^W",[["^2P","^1?"]]]]],"^10","Tells the backend this is a temporary root"]],"~:require-macros",["^ ","^6","^6","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:storage-addr","~:cfg","~:children","~:writes","~:key","^4<","^2H","^5=","^4;","^1[","~:data-b","~:ns","^28","~:op-buf-size","~:node","^2I","^2J","~:median","^1?","~:last-key","~:right","^5?","^3U","^5>","~:op-buf","~:none","~:index-b","~:left"]],"~:order",["^5W","^5P","^5X","^5O","^5Q","^2H","^2I","^2J","^5Y","^5U","^5S","^5=","^5>","^5?","^5L","^5J","^5V","^5K","^5N","^28","^4;","^4<","^1[","^5T","^5R","^3U","^1?","^5M"]],"^10",null]