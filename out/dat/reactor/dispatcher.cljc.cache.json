["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Object",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$go-loop","^7"],"~:excludes",["~#set",[]],"~:name","~$dat.reactor.dispatcher","~:imports",null,"~:requires",["^ ","~$async","~$cljs.core.async","^@","^@","~$log","~$taoensso.timbre","^B","^B","~$component","~$com.stuartsierra.component","^D","^D","~$protocols","~$dat.spec.protocols","^F","^F"],"~:uses",null,"~:defs",["^ ","~$new-strictly-ordered-dispatcher",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","~:line",66,"~:column",7,"~:end-line",66,"~:end-column",38,"~:arglists",["~#list",["~$quote",["^R",[["~$options"],[]]]]],"~:doc","Creates a new strictly ordered dispatcher. This is fine for most cases, and ensures that all events are\n  handled in the order they were dispatched (or should...). Can specify `{:dispatch-chan your-chan}` to customize\n  the flow.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",1,"~:method-params",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"~:arglists-meta",["^R",[null,null]]]],"^;","~$dat.reactor.dispatcher/new-strictly-ordered-dispatcher","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",38,"^V",["^ ","^W",false,"^X",1,"^Y",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"^Z",["^R",[null,null]]],"^Y",["^R",[["^T"],[]]],"~:protocol-impl",null,"^Z",["^R",[null,null]],"^N",1,"^M",66,"^O",66,"^X",1,"~:fn-var",true,"^Q",["^R",[["^T"],[]]],"^U","Creates a new strictly ordered dispatcher. This is fine for most cases, and ensures that all events are\n  handled in the order they were dispatched (or should...). Can specify `{:dispatch-chan your-chan}` to customize\n  the flow."],"~$ErrorPriorityDispatcher",["^ ","~:num-fields",5,"~:protocols",["^:",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$dat.spec.protocols/PDispatcher","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$dat.spec.protocols/Wire","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$com.stuartsierra.component/Lifecycle","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^;","~$dat.reactor.dispatcher/ErrorPriorityDispatcher","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",35,"~:type",true,"^N",12,"~:internal-ctor",true,"^M",77,"~:record",true,"^O",77,"~:skip-protocol-flag",["^:",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^1>","^1A","^1B","^1D","^1E"]]],"~$dispatch!",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",152,"^N",7,"^O",152,"^P",16,"^Q",["^R",["^S",["^R",[["~$dispatcher","~$event","~$level"],["^1L","^1M"]]]]],"^U","Dispatches event on the dispatcher component at the given level (:default if unspecified).","^V",["^ ","^W",false,"^X",3,"^Y",["^R",[["^1L","^1M","^1N"],["^1L","^1M"]]],"^Q",["^R",[["^1L","^1M","^1N"],["^1L","^1M"]]],"^Z",["^R",[null,null]]]],"^;","~$dat.reactor.dispatcher/dispatch!","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",16,"^V",["^ ","^W",false,"^X",3,"^Y",["^R",[["^1L","^1M","^1N"],["^1L","^1M"]]],"^Q",["^R",[["^1L","^1M","^1N"],["^1L","^1M"]]],"^Z",["^R",[null,null]]],"^Y",["^R",[["^1L","^1M","^1N"],["^1L","^1M"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",152,"^O",152,"^X",3,"^11",true,"^Q",["^R",[["^1L","^1M","^1N"],["^1L","^1M"]]],"^U","Dispatches event on the dispatcher component at the given level (:default if unspecified)."],"~$->StrictlyOrderedDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",40,"^N",12,"^O",40,"^P",37,"^1H",true,"~:factory","~:positional","^Q",["^R",["^S",["^R",[["~$dispatch-chan"]]]]]],"^;","~$dat.reactor.dispatcher/->StrictlyOrderedDispatcher","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",37,"^Y",["^R",[["^1S"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1H",true,"^1Q","^1R","^M",40,"^O",40,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^1S"]]]]]],"~$map->ErrorPriorityDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",77,"^N",12,"^O",77,"^P",35,"^1H",true,"^1Q","~:map","^Q",["^R",["^S",["^R",[["~$G__51312"]]]]]],"^;","~$dat.reactor.dispatcher/map->ErrorPriorityDispatcher","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",35,"^Y",["^R",[["^1W"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1H",true,"^1Q","^1V","^M",77,"^O",77,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^1W"]]]]]],"~$StrictlyOrderedDispatcher",["^ ","^13",1,"^14",["^:",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D","^1E"]],"^;","~$dat.reactor.dispatcher/StrictlyOrderedDispatcher","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",37,"^1G",true,"^N",12,"^1H",true,"^M",40,"^1I",true,"^O",40,"^1J",["^:",["^15","^16","^17","^18","^19","^1:","^1;","^1<","^1>","^1A","^1B","^1D","^1E"]]],"~$event-chan",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",164,"^N",7,"^O",164,"^P",17,"^Q",["^R",["^S",["^R",[["^1L"]]]]]],"^;","~$dat.reactor.dispatcher/event-chan","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",17,"^Y",["^R",[["^1L"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",164,"^O",164,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^1L"]]]]]],"~$->ErrorPriorityDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",77,"^N",12,"^O",77,"^P",35,"^1H",true,"^1Q","^1R","^Q",["^R",["^S",["^R",[["~$default>","~$error>","~$ppub","~$send>","~$recv>"]]]]]],"^;","~$dat.reactor.dispatcher/->ErrorPriorityDispatcher","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",35,"^Y",["^R",[["^22","^23","^24","^25","^26"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1H",true,"^1Q","^1R","^M",77,"^O",77,"^X",5,"^11",true,"^Q",["^R",["^S",["^R",[["^22","^23","^24","^25","^26"]]]]]],"~$map->StrictlyOrderedDispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",40,"^N",12,"^O",40,"^P",37,"^1H",true,"^1Q","^1V","^Q",["^R",["^S",["^R",[["~$G__51297"]]]]]],"^;","~$dat.reactor.dispatcher/map->StrictlyOrderedDispatcher","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",37,"^Y",["^R",[["^29"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^1H",true,"^1Q","^1V","^M",40,"^O",40,"^X",1,"^11",true,"^Q",["^R",["^S",["^R",[["^29"]]]]]],"~$dispatch-error!",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",159,"^N",7,"^O",159,"^P",22,"^Q",["^R",["^S",["^R",[["~$datview","^1M"]]]]]],"^;","~$dat.reactor.dispatcher/dispatch-error!","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",22,"^Y",["^R",[["^2<","^1M"]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",159,"^O",159,"^X",2,"^11",true,"^Q",["^R",["^S",["^R",[["^2<","^1M"]]]]]],"~$new-error-priority-dispatcher",["^ ","^J",null,"^K",["^ ","^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^M",135,"^N",7,"^O",135,"^P",36,"^Q",["^R",["^S",["^R",[["^T"],[]]]]],"^U","Creates a new ErroPriorityDispatcher. Can customize :default> and :error> through options.\n  Idea is that Reactor will get error events before other queued events, but the mechanism is a little flawed.\n  Currently, it's still possible for a non error event to get through before the reactor is ready to consume from the event-chan.\n  May need to adjust the protocols.","^V",["^ ","^W",false,"^X",1,"^Y",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"^Z",["^R",[null,null]]]],"^;","~$dat.reactor.dispatcher/new-error-priority-dispatcher","^W",false,"^L","/home/bamarco/dev/datreactor/src/cljc/dat/reactor/dispatcher.cljc","^P",36,"^V",["^ ","^W",false,"^X",1,"^Y",["^R",[["^T"],[]]],"^Q",["^R",[["^T"],[]]],"^Z",["^R",[null,null]]],"^Y",["^R",[["^T"],[]]],"^10",null,"^Z",["^R",[null,null]],"^N",1,"^M",135,"^O",135,"^X",1,"^11",true,"^Q",["^R",[["^T"],[]]],"^U","Creates a new ErroPriorityDispatcher. Can customize :default> and :error> through options.\n  Idea is that Reactor will get error events before other queued events, but the mechanism is a little flawed.\n  Currently, it's still possible for a non error event to get through before the reactor is ready to consume from the event-chan.\n  May need to adjust the protocols."]],"~:require-macros",["^ ","~$async-macros","^7","^7","^7","^A","^B","^B","^B"],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["^23","~:ppub","~:else","~:dat.reactor/priority","~:default>","~:dispatch-chan","~:default","~:recur","^24","^1S","^22","~:priority","~:recv>","~:info","~:send>","~:error","~:error>","^26","~:auto","~:p","^25"]],"~:order",["^2H","^2M","~:p","^2Q","^1S","^2G","^2P","^2D","^2N","^2L","^2I","^2F","^2O","^2J","^2K","^2E","^22","^23","^24","^25","^26"]],"^U",null]