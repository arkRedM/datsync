["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "]],"~:use-macros",["^ ","~$uuid","~$hasch.core","~$-assoc-in","~$konserve.protocols","~$go","~$cljs.core.async.macros","~$-get-in","^8","~$-bassoc","^8","~$-exists?","^8","~$-dissoc","^8","~$go-locked","~$konserve.core","~$-bget","^8","~$-update-in","^8"],"~:excludes",["~#set",["~$dissoc","~$assoc-in","~$update-in","~$exists?","~$get-in"]],"~:name","^@","~:imports",null,"~:requires",["^ ","^8","^8","^6","^6","~$cljs.core.async","^M"],"~:uses",["^ ","^5","^6","~$<!","^M","^7","^8","~$chan","^M","^;","^8","^<","^8","^=","^8","^>","^8","~$poll!","^M","^A","^8","~$put!","^M","^B","^8"],"~:defs",["^ ","~$cljs-env?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/bamarco/dev/datsync/out/konserve/core.cljc","~:line",12,"~:column",8,"~:end-line",12,"~:end-column",17,"~:private",true,"~:arglists",["~#list",["~$quote",["^12",[["~$env"]]]]],"~:doc","Take the &env from a macro, and tell whether we are expanding into cljs."],"^10",true,"^J","~$konserve.core/cljs-env?","~:variadic",false,"^W","out/konserve/core.cljc","^[",17,"~:method-params",["^12",[["^14"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^Y",1,"^X",12,"^Z",12,"~:max-fixed-arity",1,"~:fn-var",true,"^11",["^12",["^13",["^12",[["^14"]]]]],"^15","Take the &env from a macro, and tell whether we are expanding into cljs."],"^E",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",89,"^Y",7,"^Z",89,"^[",13,"^11",["^12",["^13",["^12",[["~$store","~$key"]]]]],"^15","Removes an entry from the store. "],"^J","~$konserve.core/dissoc","^17",false,"^W","out/konserve/core.cljc","^[",13,"^18",["^12",[["^1=","^1>"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",89,"^Z",89,"^1;",2,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>"]]]]],"^15","Removes an entry from the store. "],"~$log",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",116,"^Y",7,"^Z",116,"^[",10,"^11",["^12",["^13",["^12",[["^1=","^1>"]]]]],"^15","Loads the whole append log stored at "],"^J","~$konserve.core/log","^17",false,"^W","out/konserve/core.cljc","^[",10,"^18",["^12",[["^1=","^1>"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",116,"^Z",116,"^1;",2,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>"]]]]],"^15","Loads the whole append log stored at "],"~$get-lock",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",28,"^Y",7,"^Z",28,"^[",15,"^11",["^12",["^13",["^12",[[["^ ","~:keys",["~$locks"],"~:as","^1="],"^1>"]]]]]],"^J","~$konserve.core/get-lock","^17",false,"^W","out/konserve/core.cljc","^[",15,"^18",["^12",[["~$p__44309","^1>"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",28,"^Z",28,"^1;",2,"^1<",true,"^11",["^12",["^13",["^12",[[["^ ","^1C",["^1D"],"^1E","^1="],"^1>"]]]]]],"~$reduce-log",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",133,"^Y",7,"^Z",133,"^[",17,"^11",["^12",["^13",["^12",[["^1=","^1>","~$reduce-fn","~$acc"]]]]],"^15","Loads the whole append log stored at "],"^J","~$konserve.core/reduce-log","^17",false,"^W","out/konserve/core.cljc","^[",17,"^18",["^12",[["^1=","^1>","^1I","^1J"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",133,"^Z",133,"^1;",4,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>","^1I","^1J"]]]]],"^15","Loads the whole append log stored at "],"~$bget",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",152,"^Y",7,"^Z",152,"^[",11,"^11",["^12",["^13",["^12",[["^1=","^1>","~$locked-cb"]]]]],"^15","Calls locked-cb with a platform specific binary representation inside\n  the lock, e.g. wrapped InputStream on the JVM and Blob in\n  JavaScript. You need to properly close/dispose the object when you\n  are done!"],"^J","~$konserve.core/bget","^17",false,"^W","out/konserve/core.cljc","^[",11,"^18",["^12",[["^1=","^1>","^1M"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",152,"^Z",152,"^1;",3,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>","^1M"]]]]],"^15","Calls locked-cb with a platform specific binary representation inside\n  the lock, e.g. wrapped InputStream on the JVM and Blob in\n  JavaScript. You need to properly close/dispose the object when you\n  are done!"],"^F",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",81,"^Y",7,"^Z",81,"^[",15,"^11",["^12",["^13",["^12",[["^1=","~$key-vec","~$val"]]]]],"^15","Associates the key-vec to the value, any missing collections for\n  the key-vec (nested maps and vectors) are newly created."],"^J","~$konserve.core/assoc-in","^17",false,"^W","out/konserve/core.cljc","^[",15,"^18",["^12",[["^1=","^1O","^1P"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",81,"^Z",81,"^1;",3,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1O","^1P"]]]]],"^15","Associates the key-vec to the value, any missing collections for\n  the key-vec (nested maps and vectors) are newly created."],"~$append",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",97,"^Y",7,"^Z",97,"^[",13,"^11",["^12",["^13",["^12",[["^1=","^1>","~$elem"]]]]],"^15","Append the Element to the log at the given key or create a new append log there.\n  This operation only needs to write the element and pointer to disk and hence is useful in write-heavy situations."],"^J","~$konserve.core/append","^17",false,"^W","out/konserve/core.cljc","^[",13,"^18",["^12",[["^1=","^1>","^1S"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",97,"^Z",97,"^1;",3,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>","^1S"]]]]],"^15","Append the Element to the log at the given key or create a new append log there.\n  This operation only needs to write the element and pointer to disk and hence is useful in write-heavy situations."],"^G",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",72,"^Y",7,"^Z",72,"^[",16,"^11",["^12",["^13",["^12",[["^1=","^1O","~$fn"]]]]],"^15","Updates a position described by key-vec by applying up-fn and storing\n  the result atomically. Returns a vector [old new] of the previous\n  value and the result of applying up-fn (the newly stored value)."],"^J","~$konserve.core/update-in","^17",false,"^W","out/konserve/core.cljc","^[",16,"^18",["^12",[["^1=","^1O","^1U"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",72,"^Z",72,"^1;",3,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1O","^1U"]]]]],"^15","Updates a position described by key-vec by applying up-fn and storing\n  the result atomically. Returns a vector [old new] of the previous\n  value and the result of applying up-fn (the newly stored value)."],"~$bassoc",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",163,"^Y",7,"^Z",163,"^[",13,"^11",["^12",["^13",["^12",[["^1=","^1>","^1P"]]]]],"^15","Copies given value (InputStream, Reader, File, byte[] or String on\n  JVM, Blob in JavaScript) under key in the store."],"^J","~$konserve.core/bassoc","^17",false,"^W","out/konserve/core.cljc","^[",13,"^18",["^12",[["^1=","^1>","^1P"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",163,"^Z",163,"^1;",3,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>","^1P"]]]]],"^15","Copies given value (InputStream, Reader, File, byte[] or String on\n  JVM, Blob in JavaScript) under key in the store."],"^H",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",57,"^Y",7,"^Z",57,"^[",14,"^11",["^12",["^13",["^12",[["^1=","^1>"]]]]],"^15","Checks whether value is in the store."],"^J","~$konserve.core/exists?","^17",false,"^W","out/konserve/core.cljc","^[",14,"^18",["^12",[["^1=","^1>"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",57,"^Z",57,"^1;",2,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1>"]]]]],"^15","Checks whether value is in the store."],"^I",["^ ","^U",null,"^V",["^ ","^W","/home/bamarco/dev/datsync/out/konserve/core.cljc","^X",64,"^Y",7,"^Z",64,"^[",13,"^11",["^12",["^13",["^12",[["^1=","^1O"]]]]],"^15","Returns the value stored described by key-vec or nil if the path is\n  not resolvable."],"^J","~$konserve.core/get-in","^17",false,"^W","out/konserve/core.cljc","^[",13,"^18",["^12",[["^1=","^1O"]]],"^19",null,"^1:",["^12",[null,null]],"^Y",1,"^X",64,"^Z",64,"^1;",2,"^1<",true,"^11",["^12",["^13",["^12",[["^1=","^1O"]]]]],"^15","Returns the value stored described by key-vec or nil if the path is\n  not resolvable."]],"~:require-macros",["^ ","^:","^:","^@","^@"],"~:cljs.analyzer/constants",["^ ","~:seen",["^D",["~:append-log","~:key","~:else","~:locks","~:ns","~:recur","~:elem","~:next","~:unlocked"]],"~:order",["^26","^25","^2:","^27","^24","^22","^29","^28","^23"]],"^15",null]