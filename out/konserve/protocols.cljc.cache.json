["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$-dissoc"]],"~:name","~$konserve.protocols","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$PStoreSerializer",["^ ","~:meta",["^ ","~:file","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","~:line",13,"~:column",14,"~:end-line",13,"~:end-column",30,"~:doc","Decouples serialization format from storage.","~:protocol-symbol",true,"~:jsdoc",["~#list",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$-serialize",[["~$this","~$output-stream","~$read-handlers","~$val"]],"~$-deserialize",[["^J","~$write-handlers","~$input-stream"]]]]],"^D",true,"^6","~$konserve.protocols/PStoreSerializer","^>","out/konserve/protocols.cljc","^B",30,"^@",1,"^?",13,"^G",["^ ","^H",["^ ","^I",[["^J","^K","^L","^M"]],"^N",[["^J","^O","^P"]]]],"~:info",null,"^A",13,"~:tag","~$any","~:impls",["^4",[]],"^C","Decouples serialization format from storage.","^E",["^F",["@interface"]]],"~$-assoc-in",["^ ","~:protocol-inline",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",9,"^@",4,"^A",9,"^B",13,"~:protocol","~$konserve.protocols/PEDNAsyncKeyValueStore","^C",null,"~:arglists",["^F",["~$quote",["^F",[["^J","~$key-vec","^M"]]]]]],"^X","^Y","^6","~$konserve.protocols/-assoc-in","~:variadic",false,"^>","out/konserve/protocols.cljc","^B",13,"~:method-params",["^F",[["^J","^10","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^@",1,"^?",4,"^A",9,"~:max-fixed-arity",3,"~:fn-var",true,"^Z",["^F",["^[",["^F",[["^J","^10","^M"]]]]],"^C",null],"~$-jassoc-in",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",23,"^@",4,"^A",23,"^B",14,"^X","~$konserve.protocols/PJSONAsyncKeyValueStore","^C","Associates the key-vec to the value, any missing collections for the key-vec (nested maps and vectors) are newly created.","^Z",["^F",["^[",["^F",[["^J","^10","~$value"]]]]]],"^X","^19","^6","~$konserve.protocols/-jassoc-in","^12",false,"^>","out/konserve/protocols.cljc","^B",14,"^13",["^F",[["^J","^10","^1:"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",20,"^A",23,"^16",3,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^10","^1:"]]]]],"^C","Associates the key-vec to the value, any missing collections for the key-vec (nested maps and vectors) are newly created."],"~$PJSONAsyncKeyValueStore",["^ ","^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",20,"^@",14,"^A",20,"^B",37,"^C","SUBJECT TO CHANGE. Low-Level JSON implementation to give native performance. Might be merged into EDN later, when we find a comparable EDN solution. Assumes all values are JSON. ","^D",true,"^E",["^F",["@interface"]],"^G",["^ ","^H",["^ ","~$-jget-in",[["^J","^10"]],"^18",[["^J","^10","^1:"]],"~$-jupdate-in",[["^J","^10","~$up-fn"]]]]],"^D",true,"^6","^19","^>","out/konserve/protocols.cljc","^B",37,"^@",1,"^?",20,"^G",["^ ","^H",["^ ","^1=",[["^J","^10"]],"^18",[["^J","^10","^1:"]],"^1>",[["^J","^10","^1?"]]]],"^R",null,"^A",20,"^S","^T","^U",["^4",[]],"^C","SUBJECT TO CHANGE. Low-Level JSON implementation to give native performance. Might be merged into EDN later, when we find a comparable EDN solution. Assumes all values are JSON. ","^E",["^F",["@interface"]]],"~$PEDNAsyncKeyValueStore",["^ ","^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",4,"^@",14,"^A",4,"^B",36,"^C","Allows to access a store similar to hash-map in EDN.","^D",true,"^E",["^F",["@interface"]],"^G",["^ ","^H",["^ ","~$-exists?",[["^J","~$key"]],"~$-get-in",[["^J","^10"]],"~$-update-in",[["^J","^10","^1?"]],"^V",[["^J","^10","^M"]],"^5",[["^J","^1B"]]]]],"^D",true,"^6","^Y","^>","out/konserve/protocols.cljc","^B",36,"^@",1,"^?",4,"^G",["^ ","^H",["^ ","^1A",[["^J","^1B"]],"^1C",[["^J","^10"]],"^1D",[["^J","^10","^1?"]],"^V",[["^J","^10","^M"]],"^5",[["^J","^1B"]]]],"^R",null,"^A",4,"^S","^T","^U",["^4",[]],"^C","Allows to access a store similar to hash-map in EDN.","^E",["^F",["@interface"]]],"~$PBinaryAsyncKeyValueStore",["^ ","^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",27,"^@",14,"^A",27,"^B",39,"^C","Allows binary data byte array storage.","^D",true,"^E",["^F",["@interface"]],"^G",["^ ","^H",["^ ","~$-bget",[["^J","^1B","~$locked-cb"]],"~$-bassoc",[["^J","^1B","^M"]]]]],"^D",true,"^6","~$konserve.protocols/PBinaryAsyncKeyValueStore","^>","out/konserve/protocols.cljc","^B",39,"^@",1,"^?",27,"^G",["^ ","^H",["^ ","^1F",[["^J","^1B","^1G"]],"^1H",[["^J","^1B","^M"]]]],"^R",null,"^A",27,"^S","^T","^U",["^4",[]],"^C","Allows binary data byte array storage.","^E",["^F",["@interface"]]],"^1C",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",7,"^@",4,"^A",7,"^B",11,"^X","^Y","^C","Returns the value stored described by key-vec or nil if the path is not resolvable.","^Z",["^F",["^[",["^F",[["^J","^10"]]]]]],"^X","^Y","^6","~$konserve.protocols/-get-in","^12",false,"^>","out/konserve/protocols.cljc","^B",11,"^13",["^F",[["^J","^10"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",4,"^A",7,"^16",2,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^10"]]]]],"^C","Returns the value stored described by key-vec or nil if the path is not resolvable."],"^1H",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",30,"^@",4,"^A",30,"^B",11,"^X","^1I","^C","Copies given value (InputStream, Reader, File, byte[] or String on JVM, Blob in JavaScript) under key in the store.","^Z",["^F",["^[",["^F",[["^J","^1B","^M"]]]]]],"^X","^1I","^6","~$konserve.protocols/-bassoc","^12",false,"^>","out/konserve/protocols.cljc","^B",11,"^13",["^F",[["^J","^1B","^M"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",27,"^A",30,"^16",3,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^1B","^M"]]]]],"^C","Copies given value (InputStream, Reader, File, byte[] or String on JVM, Blob in JavaScript) under key in the store."],"^1>",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",24,"^@",4,"^A",24,"^B",15,"^X","^19","^C","Updates a position described by key-vec by applying up-fn and storing the result atomically. Returns a vector [old new] of the previous value and the result of applying up-fn (the newly stored value).","^Z",["^F",["^[",["^F",[["^J","^10","^1?"]]]]]],"^X","^19","^6","~$konserve.protocols/-jupdate-in","^12",false,"^>","out/konserve/protocols.cljc","^B",15,"^13",["^F",[["^J","^10","^1?"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",20,"^A",24,"^16",3,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^10","^1?"]]]]],"^C","Updates a position described by key-vec by applying up-fn and storing the result atomically. Returns a vector [old new] of the previous value and the result of applying up-fn (the newly stored value)."],"^N",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",17,"^@",4,"^A",17,"^B",16,"^X","^Q","^C",null,"^Z",["^F",["^[",["^F",[["^J","^O","^P"]]]]]],"^X","^Q","^6","~$konserve.protocols/-deserialize","^12",false,"^>","out/konserve/protocols.cljc","^B",16,"^13",["^F",[["^J","^O","^P"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",13,"^A",17,"^16",3,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^O","^P"]]]]],"^C",null],"^I",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",15,"^@",4,"^A",15,"^B",14,"^X","^Q","^C","For the JVM we use streams, while for JavaScript we return the value for now.","^Z",["^F",["^[",["^F",[["^J","^K","^L","^M"]]]]]],"^X","^Q","^6","~$konserve.protocols/-serialize","^12",false,"^>","out/konserve/protocols.cljc","^B",14,"^13",["^F",[["^J","^K","^L","^M"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",13,"^A",15,"^16",4,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^K","^L","^M"]]]]],"^C","For the JVM we use streams, while for JavaScript we return the value for now."],"^1A",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",6,"^@",4,"^A",6,"^B",12,"^X","^Y","^C","Checks whether value is in the store.","^Z",["^F",["^[",["^F",[["^J","^1B"]]]]]],"^X","^Y","^6","~$konserve.protocols/-exists?","^12",false,"^>","out/konserve/protocols.cljc","^B",12,"^13",["^F",[["^J","^1B"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",4,"^A",6,"^16",2,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^1B"]]]]],"^C","Checks whether value is in the store."],"^5",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",10,"^@",4,"^A",10,"^B",11,"^X","^Y","^C",null,"^Z",["^F",["^[",["^F",[["^J","^1B"]]]]]],"^X","^Y","^6","~$konserve.protocols/-dissoc","^12",false,"^>","out/konserve/protocols.cljc","^B",11,"^13",["^F",[["^J","^1B"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",4,"^A",10,"^16",2,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^1B"]]]]],"^C",null],"^1F",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",29,"^@",4,"^A",29,"^B",9,"^X","^1I","^C","Calls locked-cb with a platform specific binary representation inside the lock, e.g. wrapped InputStream on the JVM and Blob in JavaScript. You need to properly close/dispose the object when you are done!","^Z",["^F",["^[",["^F",[["^J","^1B","^1G"]]]]]],"^X","^1I","^6","~$konserve.protocols/-bget","^12",false,"^>","out/konserve/protocols.cljc","^B",9,"^13",["^F",[["^J","^1B","^1G"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",27,"^A",29,"^16",3,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^1B","^1G"]]]]],"^C","Calls locked-cb with a platform specific binary representation inside the lock, e.g. wrapped InputStream on the JVM and Blob in JavaScript. You need to properly close/dispose the object when you are done!"],"^1=",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",22,"^@",4,"^A",22,"^B",12,"^X","^19","^C","Returns the value stored described by key-vec or nil if the path is not resolvable.","^Z",["^F",["^[",["^F",[["^J","^10"]]]]]],"^X","^19","^6","~$konserve.protocols/-jget-in","^12",false,"^>","out/konserve/protocols.cljc","^B",12,"^13",["^F",[["^J","^10"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",20,"^A",22,"^16",2,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^10"]]]]],"^C","Returns the value stored described by key-vec or nil if the path is not resolvable."],"^1D",["^ ","^W",null,"^=",["^ ","^>","/home/bamarco/dev/datsync/out/konserve/protocols.cljc","^?",8,"^@",4,"^A",8,"^B",14,"^X","^Y","^C","Updates a position described by key-vec by applying up-fn and storing the result atomically. Returns a vector [old new] of the previous value and the result of applying up-fn (the newly stored value).","^Z",["^F",["^[",["^F",[["^J","^10","^1?"]]]]]],"^X","^Y","^6","~$konserve.protocols/-update-in","^12",false,"^>","out/konserve/protocols.cljc","^B",14,"^13",["^F",[["^J","^10","^1?"]]],"^14",null,"^15",["^F",[null,null]],"^@",1,"^?",4,"^A",8,"^16",3,"^17",true,"^Z",["^F",["^[",["^F",[["^J","^10","^1?"]]]]],"^C","Updates a position described by key-vec by applying up-fn and storing the result atomically. Returns a vector [old new] of the previous value and the result of applying up-fn (the newly stored value)."]],"~:require-macros",null,"^C",null]