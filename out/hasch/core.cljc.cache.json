["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$uuid"]],"~:name","~$hasch.core","~:imports",null,"~:requires",["^ ","~$hasch.benc","^<","~$platform","~$hasch.platform","^>","^>"],"~:uses",["^ ","~$PHashCoercion","^<","~$digest","^<","~$-coerce","^<"],"~:defs",["^ ","~$uuid4",["^ ","^8","~$hasch.core/uuid4","~:file","out/hasch/core.cljc","~:line",7,"~:column",1,"~:end-line",7,"~:end-column",11,"~:meta",["^ ","^F","/home/bamarco/dev/datsync/out/hasch/core.cljc","^G",7,"^H",6,"^I",7,"^J",11]],"~$uuid5",["^ ","^8","~$hasch.core/uuid5","^F","out/hasch/core.cljc","^G",8,"^H",1,"^I",8,"^J",11,"^K",["^ ","^F","/home/bamarco/dev/datsync/out/hasch/core.cljc","^G",8,"^H",6,"^I",8,"^J",11]],"~$hash->str",["^ ","^8","~$hasch.core/hash->str","^F","out/hasch/core.cljc","^G",9,"^H",1,"^I",9,"^J",15,"^K",["^ ","^F","/home/bamarco/dev/datsync/out/hasch/core.cljc","^G",9,"^H",6,"^I",9,"^J",15]],"~$edn-hash",["^ ","~:protocol-inline",null,"^K",["^ ","^F","/home/bamarco/dev/datsync/out/hasch/core.cljc","^G",11,"^H",7,"^I",11,"^J",15,"~:arglists",["~#list",["~$quote",["^S",[["~$val"],["^U","~$write-handlers"],["^U","~$md-create-fn","^V"]]]]],"~:doc","Hash an edn value with SHA-512 by default or a compatible hash function of choice.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",3,"~:method-params",["^S",[["^U"],["^U","^V"],["^U","^W","^V"]]],"^R",["^S",[["^U"],["^U","^V"],["^U","^W","^V"]]],"~:arglists-meta",["^S",[null,null,null]]]],"^8","~$hasch.core/edn-hash","^Z",false,"^F","out/hasch/core.cljc","^J",15,"^Y",["^ ","^Z",false,"^[",3,"^10",["^S",[["^U"],["^U","^V"],["^U","^W","^V"]]],"^R",["^S",[["^U"],["^U","^V"],["^U","^W","^V"]]],"^11",["^S",[null,null,null]]],"^10",["^S",[["^U"],["^U","^V"],["^U","^W","^V"]]],"~:protocol-impl",null,"^11",["^S",[null,null,null]],"^H",1,"^G",11,"^I",11,"^[",3,"~:fn-var",true,"^R",["^S",[["^U"],["^U","^V"],["^U","^W","^V"]]],"^X","Hash an edn value with SHA-512 by default or a compatible hash function of choice."],"^7",["^ ","^Q",null,"^K",["^ ","^F","/home/bamarco/dev/datsync/out/hasch/core.cljc","^G",19,"^H",7,"^I",19,"^J",11,"^R",["^S",["^T",["^S",[[],["^U","~$&",["^ ","~:keys",["^V"]]]]]]],"^X","Creates random UUID-4 without argument or UUID-5 for the argument value.\n\n  Optionally an incognito-style write-handlers map can be supplied,\n  which describes record serialization in terms of Clojure data\n  structures.","^Y",["^ ","^Z",true,"^[",1,"^10",["^S",[[]]],"^R",["^S",[[],["^U","~$&",["^ ","^15",["^V"]]]]],"^11",["^S",[null,null]]]],"^8","~$hasch.core/uuid","^Z",true,"^F","out/hasch/core.cljc","^J",11,"^Y",["^ ","^Z",true,"^[",1,"^10",["^S",[[]]],"^R",["^S",[[],["^U","~$&",["^ ","^15",["^V"]]]]],"^11",["^S",[null,null]]],"^10",["^S",[[]]],"^13",null,"^11",["^S",[null,null]],"^H",1,"^G",19,"^I",19,"^[",1,"^14",true,"^R",["^S",[[],["^U","~$&",["^ ","^15",["^V"]]]]],"^X","Creates random UUID-4 without argument or UUID-5 for the argument value.\n\n  Optionally an incognito-style write-handlers map can be supplied,\n  which describes record serialization in terms of Clojure data\n  structures."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:write-handlers"]],"~:order",["^1:"]],"^X","Hashing functions for EDN."]