(in-ns 'dat.sync.core
)
(new-datsync)
base-schema
(load-file "src/cljc/dat/sync/core.cljc")
(clojure.core/load-file "src/cljc/dat/sync/core.cljc")
(in-ns 'dat.sync.db)
(s/explain ::knowledge nil)
(load "src/cljc/dat/sync/db.cljc")
(load "/src/cljc/dat/sync/db.cljc")
(load "dat/sync/db.cljc")
(load "dat/sync/db")
(in-ns 'dat.sync.db
)
(s/explain ::knowledge nil)
(with (ds/empty-db) [])
(sequential? nil)
(meta defn)
(meta +)
(load "dat/sync/db.cljc")
(load "cljc/dat/sync/db.cljc")
(load "/dat/sync/db.cljc")
(load "src/cljc/dat/sync/db.cljc")
(load "dat/sync/db.cljc")
(load "dat/sync/db")
(in-ns 'dat.sync.db)
(test-multi-macro {:kind :solo-mode :a 3)
(test-multi-macro {:kind :solo-mode :a 3})
(def testtt {:kind :solo-mode :a 3})
(test-multi-macro testtt)
(load "dat/sync/db")
(in-ns 'dat.sync.db)
(def testtt {:kind :solo-mode :a 3})
(test-multi-macro testtt)
